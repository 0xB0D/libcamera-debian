ipa_rkisp1.so libcamera0 #MINVER#
 ipaCreate@Base 0~git20200116+30f9624
 ipaModuleInfo@Base 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::~ControlInfoMap()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::~ControlSerializer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::configure(ipa_context*, ipa_sensor_info const*, ipa_stream const*, unsigned int, ipa_control_info_map const*, unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::destroy(ipa_context*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::get_interface(ipa_context*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::init(ipa_context*, ipa_settings const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::IPAInterfaceWrapper(std::unique_ptr<libcamera::IPAInterface, std::default_delete<libcamera::IPAInterface> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::map_buffers(ipa_context*, ipa_buffer const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::operations_@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::process_event(ipa_context*, ipa_operation_data const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::register_callbacks(ipa_context*, ipa_callback_ops const*, void*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::start(ipa_context*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAInterfaceWrapper::stop(ipa_context*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAInterfaceWrapper::unmap_buffers(ipa_context*, unsigned int const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARkISP1::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARkISP1::~IPARkISP1()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::metadataReady(unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::queueRequest(unsigned int, rkisp1_isp_params_cfg*, libcamera::ControlList const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::setControls(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPARkISP1::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPARkISP1::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPARkISP1::updateStatistics(unsigned int, rkisp1_stat_buffer const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPARkISP1()@Base" 0~git20200116+30f9624
 (c++)"std::__cxx11::_List_base<libcamera::BoundMethodBase*, std::allocator<libcamera::BoundMethodBase*> >::_M_clear()@Base" 0~git20200417+35269f0
 (c++)"std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false>* std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > >::operator()<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&>(std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&) const@Base" 0~git20200417+35269f0
 (c++)"std::_Function_base::~_Function_base()@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >&&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200116+30f9624
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap const&>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > >::_M_emplace_unique<unsigned int&, libcamera::ControlInfoMap&>(unsigned int&, libcamera::ControlInfoMap&)@Base" 0~git20200116+30f9624
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::FrameBuffer> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::FrameBuffer>, std::_Select1st<std::pair<unsigned int const, libcamera::FrameBuffer> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer> > >::_M_emplace_unique<std::piecewise_construct_t const&, std::tuple<unsigned int const&>, std::tuple<std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&> >(std::piecewise_construct_t const&, std::tuple<unsigned int const&>&&, std::tuple<std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&>&&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::IPAStream> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, void*>, std::_Select1st<std::pair<unsigned int const, void*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, void*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, void*> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, void*>, std::_Select1st<std::pair<unsigned int const, void*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, void*> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, unsigned int&, libcamera::IPAOperationData const&>(libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>*&, std::_Sp_alloc_shared_tag<std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> > >, unsigned int&, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_make_shared_tag::_S_ti()::__tag@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPARkISP1@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPARkISP1@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_make_shared_tag@Base" 0~git20200116+30f9624
 (c++)"void std::_Destroy_aux<false>::__destroy<libcamera::ControlList*>(libcamera::ControlList*, libcamera::ControlList*)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200417+35269f0
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > >(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > const&)@Base" 0~git20200417+35269f0
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_realloc_insert<libcamera::ControlList const&>(__gnu_cxx::__normal_iterator<libcamera::ControlList*, std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> > >, libcamera::ControlList const&)@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPARkISP1@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624

ipa_rpi.so libcamera0 #MINVER#
 ipaCreate@Base 0~git20200513+924778e
 ipaModuleInfo@Base 0~git20200513+924778e
 (c++)"AlscStatus const& boost::any_cast<AlscStatus const&>(boost::any&)@Base" 0~git20200513+924778e
 (c++)"apply_manual_contrast(RPi::Pwl const&, double, double)@Base" 0~git20200513+924778e
 (c++)"apply_saturation(RPi::Matrix const&, double)@Base" 0~git20200513+924778e
 (c++)"bool boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::have<boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::input_iterator_tag> >(bool (boost::property_tree::json_parser::detail::encoding<char>::*)(char) const, boost::property_tree::json_parser::detail::number_callback_adapter<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::input_iterator_tag>&)@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AgcStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AgcStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AgcStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AlscStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AlscStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AlscStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AwbStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AwbStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<AwbStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<BlackLevelStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<BlackLevelStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<BlackLevelStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<CcmStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<CcmStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<CcmStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<ContrastStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<ContrastStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<ContrastStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DeviceStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DeviceStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DeviceStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DpcStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DpcStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<DpcStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<FocusStatus>::clone() const@Base" 0~git20200629+e7aa92a
 (c++)"boost::any::holder<FocusStatus>::~holder()@Base" 0~git20200629+e7aa92a
 (c++)"boost::any::holder<FocusStatus>::~holder()@Base" 0~git20200629+e7aa92a
 (c++)"boost::any::holder<FocusStatus>::type() const@Base" 0~git20200629+e7aa92a
 (c++)"boost::any::holder<GeqStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<GeqStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<GeqStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<LuxStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<LuxStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<LuxStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<NoiseStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<NoiseStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<NoiseStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SdnStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SdnStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SdnStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SharpenStatus>::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SharpenStatus>::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<SharpenStatus>::type() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~holder()@Base" 0~git20200513+924778e
 (c++)"boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::type() const@Base" 0~git20200513+924778e
 (c++)"boost::bad_any_cast::~bad_any_cast()@Base" 0~git20200513+924778e
 (c++)"boost::bad_any_cast::what() const@Base" 0~git20200513+924778e
 (c++)"boost::enable_if<boost::property_tree::detail::is_translator<boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, double> >, double>::type boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_value<double, boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, double> >(boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, double>) const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::clone() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::copy_boost_exception(boost::exception*, boost::exception const*)@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::bad_any_cast>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::bad_any_cast>::error_info_injector(boost::exception_detail::error_info_injector<boost::bad_any_cast> const&)@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::error_info_injector(boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> const&)@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::error_info_injector(boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> const&)@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::error_info_injector(boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> const&)@Base" 0~git20200513+924778e
 (c++)"boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::release()@Base" 0~git20200513+924778e
 (c++)"boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::multi_index::detail::nth_layer<2, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na> >, boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, boost::mpl::v_item<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy>::copy_(boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, boost::multi_index::detail::nth_layer<2, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na> >, boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, boost::mpl::v_item<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, boost::mpl::vector0<mpl_::na>, 0>, boost::multi_index::detail::ordered_non_unique_tag, boost::multi_index::detail::null_augment_policy> const&, boost::multi_index::detail::copy_map<boost::multi_index::detail::sequenced_index_node<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy, boost::multi_index::detail::index_node_base<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > const&)@Base" 0~git20200513+924778e
 (c++)"boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy, std::allocator<char> >::rebalance(boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy, std::allocator<char> >*, boost::multi_index::detail::ordered_index_node_compressed_base<boost::multi_index::detail::null_augment_policy, std::allocator<char> >::parent_ref)@Base" 0~git20200513+924778e
 (c++)"boost::multi_index::multi_index_container<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na> >, boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >::multi_index_container(boost::multi_index::multi_index_container<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::multi_index::indexed_by<boost::multi_index::sequenced<boost::multi_index::tag<mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na> >, boost::multi_index::ordered_non_unique<boost::multi_index::tag<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::subs::by_name, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, boost::multi_index::member<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, &std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::first>, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na, mpl_::na>, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > const&)@Base" 0~git20200513+924778e
 (c++)"boost::optional<double> boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_optional<double>(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const@Base" 0~git20200513+924778e
 (c++)"boost::optional<int> boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_optional<int>(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const@Base" 0~git20200513+924778e
 (c++)"boost::optional<unsigned short> boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_optional<unsigned short>(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~basic_ptree()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_child(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::get_child_optional(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::walk_path(boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::file_parser_error::~file_parser_error()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::file_parser_error::file_parser_error(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::file_parser_error::format_what(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_0(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_a(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_backslash(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_b(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_brace(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_close_bracket(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_colon(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_comma(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit0(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_digit(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_dot(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_e(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_eE(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_f(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_l(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_minus(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_n(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_brace(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_open_bracket(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_plusminus(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_quote(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_r(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_s(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_slash(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_t(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_u(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::external_ascii_superset_encoding::is_ws(char) const@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_array()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_boolean()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_codepoint_ref()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_error(char const*)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_escape()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_hex_quad()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_number()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_object()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_string()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_value()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::parser<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::skip_ws()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::source<boost::property_tree::json_parser::detail::encoding<char>, std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> > >::parse_error(char const*)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::new_tree()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::on_code_unit(char)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::detail::utf8_utf8_encoding::trail_table(unsigned char) const::table@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::json_parser::json_parser_error::~json_parser_error()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::ptree_bad_data::~ptree_bad_data()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::ptree_bad_data::ptree_bad_data(boost::property_tree::ptree_bad_data const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::ptree_bad_path::~ptree_bad_path()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::ptree_bad_path::ptree_bad_path<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::ptree_error::~ptree_error()@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, double>::get_value(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, int>::get_value(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::stream_translator<char, std::char_traits<char>, std::allocator<char>, unsigned short>::get_value(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::reduce()@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::bad_any_cast>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::exception_detail::remove_error_info_injector<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::type> boost::exception_detail::enable_both<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >(boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> const&)@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::exception_detail::remove_error_info_injector<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::type> boost::exception_detail::enable_both<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >(boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> const&)@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::exception_detail::remove_error_info_injector<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::type> boost::exception_detail::enable_both<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >(boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> const&)@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::property_tree::ptree_bad_data>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"calculate_ccm(std::vector<RPi::CtCcm, std::allocator<RPi::CtCcm> > const&, double)@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::~CamHelperImx219()@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::CamHelperImx219()@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::GainCode(double) const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::Gain(unsigned int) const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::GetOrientation() const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::MistrustFramesModeSwitch() const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx219::SensorEmbeddedDataPresent() const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::~CamHelperImx477()@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::CamHelperImx477()@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::GainCode(double) const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::Gain(unsigned int) const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::GetOrientation() const@Base" 0~git20200513+924778e
 (c++)"CamHelperImx477::SensorEmbeddedDataPresent() const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::~CamHelperOv5647()@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::CamHelperOv5647()@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::GainCode(double) const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::Gain(unsigned int) const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::GetDelays(int&, int&) const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::HideFramesModeSwitch() const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::MistrustFramesModeSwitch() const@Base" 0~git20200513+924778e
 (c++)"CamHelperOv5647::MistrustFramesStartup() const@Base" 0~git20200513+924778e
 (c++)"compute_stretch_curve(RPi::Histogram const&, RPi::ContrastConfig const&)@Base" 0~git20200513+924778e
 (c++)"DeviceStatus const& boost::any_cast<DeviceStatus const&>(boost::any&)@Base" 0~git20200513+924778e
 (c++)"int RPi::Metadata::Get<AgcStatus>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, AgcStatus&) const@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodPack()@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlInfo::~ControlInfo()@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::ControlInfo&&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlInfoMap::~ControlInfoMap()@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlSerializer::~ControlSerializer()@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue<bool, decltype(nullptr)>(bool const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue<float, decltype(nullptr)>(float const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue<int, decltype(nullptr)>(int const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterface::~IPAInterface()@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::configure(ipa_context*, ipa_sensor_info const*, ipa_stream const*, unsigned int, ipa_control_info_map const*, unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::destroy(ipa_context*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::get_interface(ipa_context*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::init(ipa_context*, ipa_settings const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::IPAInterfaceWrapper(std::unique_ptr<libcamera::IPAInterface, std::default_delete<libcamera::IPAInterface> >)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::map_buffers(ipa_context*, ipa_buffer const*, unsigned long)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::operations_@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::process_event(ipa_context*, ipa_operation_data const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::register_callbacks(ipa_context*, ipa_callback_ops const*, void*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::start(ipa_context*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::stop(ipa_context*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::unmap_buffers(ipa_context*, unsigned int const*, unsigned long)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyAGC(AgcStatus const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyAWB(AwbStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyBlackLevel(BlackLevelStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyCCM(CcmStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyDenoise(SdnStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyDG(AgcStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyDPC(DpcStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyGamma(ContrastStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyGEQ(GeqStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applyLS(AlscStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::applySharpen(SharpenStatus const*, libcamera::ControlList&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::~IPARPi()@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::parseEmbeddedData(unsigned int, DeviceStatus&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::prepareISP(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::processStats(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::queueRequest(libcamera::ControlList const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::reportMetadata()@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::resampleTable(unsigned short*, double const (*) [16], int, int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::returnEmbeddedBuffer(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::setMode(libcamera::CameraSensorInfo const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::start()@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::stop()@Base" 0~git20200513+924778e
 (c++)"libcamera::IPARPi::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::logCategoryIPARPI()@Base" 0~git20200513+924778e
 (c++)"LuxStatus const& boost::any_cast<LuxStatus const&>(boost::any&)@Base" 0~git20200513+924778e
 (c++)"MdParserImx219::GetExposureLines(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"MdParserImx219::GetGainCode(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"MdParserImx219::~MdParserImx219()@Base" 0~git20200513+924778e
 (c++)"MdParserImx219::MdParserImx219()@Base" 0~git20200513+924778e
 (c++)"MdParserImx219::Parse(void*)@Base" 0~git20200513+924778e
 (c++)"MdParserImx477::GetExposureLines(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"MdParserImx477::GetGainCode(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"MdParserImx477::~MdParserImx477()@Base" 0~git20200513+924778e
 (c++)"MdParserImx477::MdParserImx477()@Base" 0~git20200513+924778e
 (c++)"MdParserImx477::Parse(void*)@Base" 0~git20200513+924778e
 (c++)"NoiseStatus const& boost::any_cast<NoiseStatus const&>(boost::any&)@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::error_info_injector<boost::bad_any_cast>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>::~error_info_injector()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::wrapexcept<boost::bad_any_cast>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::wrapexcept<boost::property_tree::ptree_bad_data>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"non-virtual thunk to boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::~Agc()@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::Agc(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::applyDigitalGain(RPi::Metadata*, double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::computeGain(bcm2835_isp_stats*, RPi::Metadata*, double&, double&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::computeTargetExposure(double)@Base" 0~git20200513+924778e
 (c++)"RPi::AgcConfig::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::AgcConstraint::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::divvyupExposure()@Base" 0~git20200513+924778e
 (c++)"RPi::AgcExposureMode::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::fetchCurrentExposure(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::filterExposure(bool)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::housekeepConfig()@Base" 0~git20200513+924778e
 (c++)"RPi::AgcMeteringMode::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetConstraintMode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetEv(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetExposureMode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetFixedAnalogueGain(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetFixedShutter(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetFlickerPeriod(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SetMeteringMode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Agc::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Agc::writeAndFinish(RPi::Metadata*, bool)@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::IsPaused() const@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Pause()@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::Resume()@Base" 0~git20200513+924778e
 (c++)"RPi::Algorithm::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Alsc::~Alsc()@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Alsc(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::asyncFunc()@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::doAlsc()@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::fetchAsyncResults()@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::restartAsync(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Alsc::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Awb::asyncFunc()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::~Awb()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::awbBayes()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::awbGrey()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Awb(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::coarseSearch(RPi::Pwl const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::computeDelta2Sum(double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::AwbConfig::~AwbConfig()@Base" 0~git20200513+924778e
 (c++)"RPi::AwbConfig::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::doAwb()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::fetchAsyncResults()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::fineSearch(double&, double&, double&, RPi::Pwl const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::interpolatePrior()@Base" 0~git20200513+924778e
 (c++)"RPi::AwbMode::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::prepareStats()@Base" 0~git20200513+924778e
 (c++)"RPi::AwbPrior::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::restartAsync(std::shared_ptr<bcm2835_isp_stats>&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::RGB::INVALID@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::SetManualGains(double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Awb::SetMode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::BlackLevel::~BlackLevel()@Base" 0~git20200513+924778e
 (c++)"RPi::BlackLevel::BlackLevel(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::BlackLevel::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::BlackLevel::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::BlackLevel::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::~CamHelper()@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::CamHelper(RPi::MdParser*)@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::Create(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::ExposureLines(double) const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::Exposure(unsigned int) const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::GetDelays(int&, int&) const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::GetOrientation() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::HideFramesModeSwitch() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::HideFramesStartup() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::MistrustFramesModeSwitch() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::MistrustFramesStartup() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::SensorEmbeddedDataPresent() const@Base" 0~git20200513+924778e
 (c++)"RPi::CamHelper::SetCameraMode(CameraMode const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::~Ccm()@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::Ccm(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Ccm::SetSaturation(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::~Contrast()@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Contrast(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::SetBrightness(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Contrast::SetContrast(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::~Controller()@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Controller()@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Controller(char const*)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::CreateAlgorithm(char const*)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::GetAlgorithm(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::GetGlobalMetadata()@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Process(std::shared_ptr<bcm2835_isp_stats>, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::Read(char const*)@Base" 0~git20200513+924778e
 (c++)"RPi::Controller::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Dpc::~Dpc()@Base" 0~git20200513+924778e
 (c++)"RPi::Dpc::Dpc(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Dpc::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Dpc::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Dpc::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Focus::~Focus()@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::~Focus()@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::~Focus()@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::Focus(RPi::Controller*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::Focus(RPi::Controller*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::Name() const@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Focus::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Geq::~Geq()@Base" 0~git20200513+924778e
 (c++)"RPi::Geq::Geq(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Geq::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Geq::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Geq::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::GetAlgorithms[abi:cxx11]()@Base" 0~git20200513+924778e
 (c++)"RPi::Histogram::CumulativeFreq(double) const@Base" 0~git20200513+924778e
 (c++)"RPi::Histogram::Histogram<unsigned int>(unsigned int*, int)@Base" 0~git20200513+924778e
 (c++)"RPi::Histogram::InterQuantileMean(double, double) const@Base" 0~git20200513+924778e
 (c++)"RPi::Histogram::Quantile(double, int, int) const@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::~Lux()@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::Lux(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::Process(std::shared_ptr<bcm2835_isp_stats>&, RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Lux::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Matrix::Matrix()@Base" 0~git20200513+924778e
 (c++)"RPi::Matrix::Matrix(double, double, double, double, double, double, double, double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Matrix::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserRPi::GetExposureLines(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserRPi::GetGainCode(unsigned int&)@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserRPi::~MdParserRPi()@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserRPi::MdParserRPi()@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserRPi::Parse(void*)@Base" 0~git20200513+924778e
 (c++)"RPi::MdParserSmia::findRegs(unsigned char*, unsigned int*, int*, unsigned int)@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::~Noise()@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::Noise(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Noise::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Pwl::Append(double, double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Combine(RPi::Pwl const&, RPi::Pwl const&, std::function<double (double, double, double)>, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Compose(RPi::Pwl const&, double) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Debug(_IO_FILE*) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Domain() const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Empty() const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Eval(double, int*, bool) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::findSpan(double, int) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Invert(RPi::Pwl::Point const&, RPi::Pwl::Point&, int&, double) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Map2(RPi::Pwl const&, RPi::Pwl const&, std::function<void (double, double, double)>)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Map(std::function<void (double, double)>) const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::MatchDomain(RPi::Pwl::Interval const&, bool, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::operator*=(double)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Prepend(double, double, double)@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Range() const@Base" 0~git20200513+924778e
 (c++)"RPi::Pwl::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::RegisterAlgorithm::RegisterAlgorithm(char const*, RPi::Algorithm* (*)(RPi::Controller*))@Base" 0~git20200513+924778e
 (c++)"RPi::RegisterCamHelper::RegisterCamHelper(char const*, RPi::CamHelper* (*)())@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::Initialise()@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::~Sdn()@Base" 0~git20200513+924778e
 (c++)"RPi::Sdn::Sdn(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::Name() const@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::Prepare(RPi::Metadata*)@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::Read(boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::SetStrength(double)@Base" 0~git20200629+e7aa92a
 (c++)"RPi::Sharpen::~Sharpen()@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::Sharpen(RPi::Controller*)@Base" 0~git20200513+924778e
 (c++)"RPi::Sharpen::SwitchMode(CameraMode const&, RPi::Metadata*)@Base" 0~git20200629+e7aa92a
 (c++)"std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > boost::property_tree::detail::prepare_bad_path_what<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::_List_base<libcamera::BoundMethodBase*, std::allocator<libcamera::BoundMethodBase*> >::_M_clear()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false>* std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > >::operator()<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&>(std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&) const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::at(unsigned int const&) const@Base" 0~git20200513+924778e
 (c++)"std::_Function_base::~_Function_base()@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >&&)@Base" 0~git20200513+924778e
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200513+924778e
 (c++)"std::map<int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<int>, std::allocator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~map()@Base" 0~git20200513+924778e
 (c++)"std::map<int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<int>, std::allocator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::map(std::initializer_list<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<int> const&, std::allocator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPi::Algorithm* (*)(RPi::Controller*), std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> > >::~map()@Base" 0~git20200513+924778e
 (c++)"std::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, RPi::CamHelper* (*)(), std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> > >::~map()@Base" 0~git20200513+924778e
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap const&>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > >::_M_emplace_unique<unsigned int&, libcamera::ControlInfoMap&>(unsigned int&, libcamera::ControlInfoMap&)@Base" 0~git20200513+924778e
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::FrameBuffer> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::FrameBuffer>, std::_Select1st<std::pair<unsigned int const, libcamera::FrameBuffer> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer> > >::_M_emplace_unique<std::piecewise_construct_t const&, std::tuple<unsigned int const&>, std::tuple<std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&> >(std::piecewise_construct_t const&, std::tuple<unsigned int const&>&&, std::tuple<std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&>&&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<int, std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<int>, std::allocator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<int, std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::_Select1st<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::less<int>, std::allocator<std::pair<int const, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_get_insert_unique_pos(int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> > >::find(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> > >::_M_erase(std::_Rb_tree_node<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >*)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, boost::any> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcExposureMode> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AgcMeteringMode> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::Algorithm* (*)(RPi::Controller*)> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::AwbMode> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()>, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, RPi::CamHelper* (*)()> > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > >, std::_Select1st<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > > >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > > > >::_M_get_insert_unique_pos(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap> >, unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::IPAStream> >, unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, void*>, std::_Select1st<std::pair<unsigned int const, void*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, void*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, void*> >, unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, void*>, std::_Select1st<std::pair<unsigned int const, void*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, void*> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, unsigned int&, libcamera::IPAOperationData const&>(libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>*&, std::_Sp_alloc_shared_tag<std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> > >, unsigned int&, libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_make_shared_tag::_S_ti()::__tag@Base" 0~git20200513+924778e
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Alsc::*(RPi::Alsc*))()> > > >::_M_run()@Base" 0~git20200513+924778e
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Alsc::*(RPi::Alsc*))()> > > >::~_State_impl()@Base" 0~git20200513+924778e
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Awb::*(RPi::Awb*))()> > > >::_M_run()@Base" 0~git20200513+924778e
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Awb::*(RPi::Awb*))()> > > >::~_State_impl()@Base" 0~git20200513+924778e
 (c++)"std::unique_lock<RPi::Metadata>::unlock()@Base" 0~git20200513+924778e
 (c++)"std::unique_lock<std::mutex>::unlock()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<double, std::allocator<double> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<RPi::AlscCalibration, std::allocator<RPi::AlscCalibration> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<RPi::Pwl::Point, std::allocator<RPi::Pwl::Point> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<unsigned long, std::allocator<unsigned long> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_default_append(unsigned long)@Base" 0~git20200513+924778e
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::~vector()@Base" 0~git20200513+924778e
 (c++)"std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::_M_default_append(unsigned long)@Base" 0~git20200513+924778e
 (c++)"std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> >::~vector()@Base" 0~git20200513+924778e
 (c++)"typeinfo for AgcStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for AlscStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for AwbStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for BlackLevelStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<AgcStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<AlscStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<AwbStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<BlackLevelStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<CcmStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<ContrastStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<DeviceStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<DpcStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<FocusStatus>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for boost::any::holder<GeqStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<LuxStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<NoiseStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<SdnStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<SharpenStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::any::placeholder@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::bad_any_cast@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::clone_base@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::error_info_injector<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::file_parser_error@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::json_parser::json_parser_error@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::ptree_bad_data@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::ptree_bad_path@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::ptree_error@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::wrapexcept<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::wrapexcept<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"typeinfo for boost::wrapexcept<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"typeinfo for CamHelperImx219@Base" 0~git20200513+924778e
 (c++)"typeinfo for CamHelperImx477@Base" 0~git20200513+924778e
 (c++)"typeinfo for CamHelperOv5647@Base" 0~git20200513+924778e
 (c++)"typeinfo for CcmStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for ContrastStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for DeviceStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for DpcStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for FocusStatus@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for GeqStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::IPAInterface@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::IPARPi@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo for LuxStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for MdParserImx219@Base" 0~git20200513+924778e
 (c++)"typeinfo for MdParserImx477@Base" 0~git20200513+924778e
 (c++)"typeinfo for NoiseStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::AgcAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Agc@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Algorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Alsc@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::AwbAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Awb@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::BlackLevel@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::CamHelper@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::CcmAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Ccm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::ContrastAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Contrast@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Dpc@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Focus@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for RPi::Geq@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Lux@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::MdParser@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::MdParserRPi@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::MdParserSmia@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Noise@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::Sdn@Base" 0~git20200513+924778e
 (c++)"typeinfo for RPi::SharpenAlgorithm@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for RPi::Sharpen@Base" 0~git20200513+924778e
 (c++)"typeinfo for SdnStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for SharpenStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Alsc::*(RPi::Alsc*))()> > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Awb::*(RPi::Awb*))()> > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for AgcStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for AlscStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for AwbStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for BlackLevelStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<AgcStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<AlscStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<AwbStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<BlackLevelStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<CcmStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<ContrastStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<DeviceStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<DpcStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<FocusStatus>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for boost::any::holder<GeqStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<LuxStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<NoiseStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<SdnStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<SharpenStatus>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::any::placeholder@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::bad_any_cast@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::clone_base@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::error_info_injector<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::file_parser_error@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::json_parser::json_parser_error@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::ptree_bad_data@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::ptree_bad_path@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::ptree_error@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::wrapexcept<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::wrapexcept<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for boost::wrapexcept<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for CamHelperImx219@Base" 0~git20200513+924778e
 (c++)"typeinfo name for CamHelperImx477@Base" 0~git20200513+924778e
 (c++)"typeinfo name for CamHelperOv5647@Base" 0~git20200513+924778e
 (c++)"typeinfo name for CcmStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for ContrastStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for DeviceStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for DpcStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for FocusStatus@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for GeqStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::IPAInterface@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::IPARPi@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo name for LuxStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for MdParserImx219@Base" 0~git20200513+924778e
 (c++)"typeinfo name for MdParserImx477@Base" 0~git20200513+924778e
 (c++)"typeinfo name for NoiseStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::AgcAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Agc@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Algorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Alsc@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::AwbAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Awb@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::BlackLevel@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::CamHelper@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::CcmAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Ccm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::ContrastAlgorithm@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Contrast@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Dpc@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Focus@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for RPi::Geq@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Lux@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::MdParser@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::MdParserRPi@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::MdParserSmia@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Noise@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::Sdn@Base" 0~git20200513+924778e
 (c++)"typeinfo name for RPi::SharpenAlgorithm@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for RPi::Sharpen@Base" 0~git20200513+924778e
 (c++)"typeinfo name for SdnStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for SharpenStatus@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_make_shared_tag@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Alsc::*(RPi::Alsc*))()> > > >@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Awb::*(RPi::Awb*))()> > > >@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::clone() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::clone() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::clone() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::clone() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::~clone_impl()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >::rethrow() const@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::wrapexcept<boost::bad_any_cast>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::wrapexcept<boost::property_tree::ptree_bad_data>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"virtual thunk to boost::wrapexcept<boost::property_tree::ptree_bad_path>::~wrapexcept()@Base" 0~git20200513+924778e
 (c++)"void boost::exception_detail::throw_exception_<boost::property_tree::json_parser::json_parser_error>(boost::property_tree::json_parser::json_parser_error const&, char const*, char const*, int)@Base" 0~git20200513+924778e
 (c++)"void boost::property_tree::json_parser::detail::read_json_internal<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::basic_istream<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::key_type::value_type, std::char_traits<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::key_type::value_type> >&, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200513+924778e
 (c++)"void boost::property_tree::json_parser::read_json<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, std::locale const&)@Base" 0~git20200513+924778e
 (c++)"void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)@Base" 0~git20200513+924778e
 (c++)"void std::_Destroy_aux<false>::__destroy<libcamera::ControlList*>(libcamera::ControlList*, libcamera::ControlList*)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > >(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlValue>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlValue>, false> > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer, std::allocator<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer> >::_M_realloc_insert<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer const&>(__gnu_cxx::__normal_iterator<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer*, std::vector<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer, std::allocator<boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer> > >, boost::property_tree::json_parser::detail::standard_callbacks<boost::property_tree::basic_ptree<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::less<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::layer const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<double, std::allocator<double> >::_M_realloc_insert<double>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_realloc_insert<libcamera::ControlList const&>(__gnu_cxx::__normal_iterator<libcamera::ControlList*, std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> > >, libcamera::ControlList const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> >::_M_realloc_insert<RPi::AgcConstraint>(__gnu_cxx::__normal_iterator<RPi::AgcConstraint*, std::vector<RPi::AgcConstraint, std::allocator<RPi::AgcConstraint> > >, RPi::AgcConstraint&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::AlscCalibration, std::allocator<RPi::AlscCalibration> >::_M_realloc_insert<RPi::AlscCalibration const&>(__gnu_cxx::__normal_iterator<RPi::AlscCalibration*, std::vector<RPi::AlscCalibration, std::allocator<RPi::AlscCalibration> > >, RPi::AlscCalibration const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::AwbPrior, std::allocator<RPi::AwbPrior> >::_M_realloc_insert<RPi::AwbPrior const&>(__gnu_cxx::__normal_iterator<RPi::AwbPrior*, std::vector<RPi::AwbPrior, std::allocator<RPi::AwbPrior> > >, RPi::AwbPrior const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::Awb::RGB, std::allocator<RPi::Awb::RGB> >::_M_realloc_insert<RPi::Awb::RGB const&>(__gnu_cxx::__normal_iterator<RPi::Awb::RGB*, std::vector<RPi::Awb::RGB, std::allocator<RPi::Awb::RGB> > >, RPi::Awb::RGB const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::CtCcm, std::allocator<RPi::CtCcm> >::_M_realloc_insert<RPi::CtCcm>(__gnu_cxx::__normal_iterator<RPi::CtCcm*, std::vector<RPi::CtCcm, std::allocator<RPi::CtCcm> > >, RPi::CtCcm&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<RPi::Pwl::Point, std::allocator<RPi::Pwl::Point> >::_M_realloc_insert<RPi::Pwl::Point>(__gnu_cxx::__normal_iterator<RPi::Pwl::Point*, std::vector<RPi::Pwl::Point, std::allocator<RPi::Pwl::Point> > >, RPi::Pwl::Point&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> >, std::allocator<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> > > >::_M_realloc_insert<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> >*, std::vector<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> >, std::allocator<std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> > > > >, std::unique_ptr<RPi::Algorithm, std::default_delete<RPi::Algorithm> >&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<AgcStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<AlscStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<AwbStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<BlackLevelStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<boost::property_tree::string_path<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, boost::property_tree::id_translator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<CcmStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<ContrastStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<DeviceStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<DpcStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<FocusStatus>@Base" 0~git20200629+e7aa92a
 (c++)"vtable for boost::any::holder<GeqStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<LuxStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<NoiseStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<SdnStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<SharpenStatus>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::any::holder<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::bad_any_cast@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::clone_base@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::error_info_injector<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::property_tree::file_parser_error@Base" 0~git20200513+924778e
 (c++)"vtable for boost::property_tree::json_parser::json_parser_error@Base" 0~git20200513+924778e
 (c++)"vtable for boost::property_tree::ptree_bad_data@Base" 0~git20200513+924778e
 (c++)"vtable for boost::property_tree::ptree_bad_path@Base" 0~git20200513+924778e
 (c++)"vtable for boost::property_tree::ptree_error@Base" 0~git20200513+924778e
 (c++)"vtable for boost::wrapexcept<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::wrapexcept<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"vtable for boost::wrapexcept<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e
 (c++)"vtable for CamHelperImx219@Base" 0~git20200513+924778e
 (c++)"vtable for CamHelperImx477@Base" 0~git20200513+924778e
 (c++)"vtable for CamHelperOv5647@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::IPAInterface@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::IPARPi@Base" 0~git20200513+924778e
 (c++)"vtable for MdParserImx219@Base" 0~git20200513+924778e
 (c++)"vtable for MdParserImx477@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Agc@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Algorithm@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Alsc@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Awb@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::BlackLevel@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::CamHelper@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Ccm@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Contrast@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Dpc@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Focus@Base" 0~git20200629+e7aa92a
 (c++)"vtable for RPi::Geq@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Lux@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::MdParserRPi@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Noise@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Sdn@Base" 0~git20200513+924778e
 (c++)"vtable for RPi::Sharpen@Base" 0~git20200513+924778e
 (c++)"vtable for std::_Sp_counted_ptr_inplace<bcm2835_isp_stats, std::allocator<bcm2835_isp_stats>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Alsc::*(RPi::Alsc*))()> > > >@Base" 0~git20200513+924778e
 (c++)"vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<std::_Bind<void (RPi::Awb::*(RPi::Awb*))()> > > >@Base" 0~git20200513+924778e
 (c++)"VTT for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::bad_any_cast> >@Base" 0~git20200513+924778e
 (c++)"VTT for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::json_parser::json_parser_error> >@Base" 0~git20200513+924778e
 (c++)"VTT for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_data> >@Base" 0~git20200513+924778e
 (c++)"VTT for boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::property_tree::ptree_bad_path> >@Base" 0~git20200513+924778e
 (c++)"VTT for boost::wrapexcept<boost::bad_any_cast>@Base" 0~git20200513+924778e
 (c++)"VTT for boost::wrapexcept<boost::property_tree::json_parser::json_parser_error>@Base" 0~git20200513+924778e
 (c++)"VTT for boost::wrapexcept<boost::property_tree::ptree_bad_data>@Base" 0~git20200513+924778e
 (c++)"VTT for boost::wrapexcept<boost::property_tree::ptree_bad_path>@Base" 0~git20200513+924778e

ipa_vimc.so libcamera0 #MINVER#
 ipaCreate@Base 0~git20200116+30f9624
 ipaModuleInfo@Base 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::~ControlInfoMap()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::~ControlSerializer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterface::~IPAInterface()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAInterfaceWrapper::configure(ipa_context*, ipa_sensor_info const*, ipa_stream const*, unsigned int, ipa_control_info_map const*, unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::destroy(ipa_context*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::get_interface(ipa_context*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::init(ipa_context*, ipa_settings const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAInterfaceWrapper::IPAInterfaceWrapper(std::unique_ptr<libcamera::IPAInterface, std::default_delete<libcamera::IPAInterface> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::map_buffers(ipa_context*, ipa_buffer const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::operations_@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::process_event(ipa_context*, ipa_operation_data const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::register_callbacks(ipa_context*, ipa_callback_ops const*, void*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterfaceWrapper::start(ipa_context*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAInterfaceWrapper::stop(ipa_context*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAInterfaceWrapper::unmap_buffers(ipa_context*, unsigned int const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAVimc::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAVimc::initTrace()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::~IPAVimc()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::IPAVimc()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAVimc::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAVimc::trace(libcamera::IPAOperationCode)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAVimc::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPAVimc()@Base" 0~git20200116+30f9624
 (c++)"std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false>* std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > >::operator()<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&>(std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&) const@Base" 0~git20200417+35269f0
 (c++)"std::_Function_base::~_Function_base()@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200116+30f9624
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap const&>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > >::_M_emplace_unique<unsigned int&, libcamera::ControlInfoMap&>(unsigned int&, libcamera::ControlInfoMap&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::IPAStream> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, unsigned int&, libcamera::IPAOperationData const&>(libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>*&, std::_Sp_alloc_shared_tag<std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> > >, unsigned int&, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_make_shared_tag::_S_ti()::__tag@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAVimc@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAVimc@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_make_shared_tag@Base" 0~git20200116+30f9624
 (c++)"void std::_Destroy_aux<false>::__destroy<libcamera::ControlList*>(libcamera::ControlList*, libcamera::ControlList*)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200417+35269f0
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > >(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > const&)@Base" 0~git20200417+35269f0
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > const&)@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAInterfaceWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAVimc@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624

libcamera.so.0 libcamera0 #MINVER#
 (c++)"bool std::binary_search<__gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, char>(__gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::vector<char, std::allocator<char> > >, char const&)@Base" 0~git20200513+924778e
 (c++)"bool std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_expression_term<false, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>&)@Base" 0~git20200513+924778e
 (c++)"bool std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_expression_term<false, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>&)@Base" 0~git20200513+924778e
 (c++)"bool std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_expression_term<true, false>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>&)@Base" 0~git20200513+924778e
 (c++)"bool std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_expression_term<true, true>(std::pair<bool, char>&, std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>&)@Base" 0~git20200513+924778e
 (c++)"bool std::__detail::__regex_algo_impl<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, char, std::__cxx11::regex_traits<char>, (std::__detail::_RegexExecutorPolicy)0, false>(__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::__cxx11::match_results<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >&, std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> > const&, std::regex_constants::match_flag_type)@Base" 0~git20200513+924778e
 (c++)"guard variable for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"guard variable for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"guard variable for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"guard variable for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodArgs<int>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<int, libcamera::Camera*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::CameraConfiguration*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Request*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<void, bool>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, libcamera::Camera*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<void, libcamera::EventNotifier*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodArgs<void, libcamera::IPAOperationData const&>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodArgs<void, libcamera::IPCUnixSocket*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, libcamera::MediaDevice*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, libcamera::Timer*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodArgs<void, unsigned int>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodBase::activatePack(std::shared_ptr<libcamera::BoundMethodPackBase>, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>::activate(bool)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>::invoke()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>::activate(libcamera::EventNotifier*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>::invoke(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::activate(bool, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::invoke(bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>::activate(libcamera::IPCUnixSocket*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>::invoke(libcamera::IPCUnixSocket*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>::activate(bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>::invoke()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>::activate(bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>::invoke()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>::activate(libcamera::IPAOperationData const&, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>::invoke(libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>::activate(libcamera::EventNotifier*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>::invoke(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>::activate(libcamera::Camera*, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>::invoke(libcamera::Camera*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>::activate(libcamera::Camera*, libcamera::CameraConfiguration*, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>::invoke(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>::activate(libcamera::Camera*, libcamera::Request*, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>::invoke(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>::activate(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>::invoke(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>::activate(libcamera::Camera*, bool)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>::~BoundMethodMember()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>::invoke(libcamera::Camera*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>::activate(libcamera::MediaDevice*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>::invoke(libcamera::MediaDevice*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>::activate(libcamera::EventNotifier*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>::invoke(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>::activate(unsigned int, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>::invoke(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>::activate(unsigned int, libcamera::IPAOperationData const&, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>::invoke(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, libcamera::FrameBuffer*, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*, libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>::activate(libcamera::Timer*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>::invoke(libcamera::Timer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::activate(bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::invoke()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>::activate(libcamera::EventNotifier*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>::invoke(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>::activate(libcamera::FrameBuffer*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>::~BoundMethodMember()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>::invoke(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<int>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<int, libcamera::Camera*>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<void*, bool>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, libcamera::Camera*>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>::~BoundMethodPack()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>::~BoundMethodPack()@Base" 0~git20200417+35269f0
 (c++)"libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, libcamera::Timer*>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::BoundMethodPack<void*, unsigned int>::~BoundMethodPack()@Base" 0~git20200513+924778e
 (c++)"libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>::~BoundMethodPack()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::ByteStreamBuffer(libcamera::ByteStreamBuffer&&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::carveOut(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::operator=(libcamera::ByteStreamBuffer&&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::read(unsigned char*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::read(unsigned long, unsigned long)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ByteStreamBuffer::setOverflow()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::skip(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ByteStreamBuffer::write(unsigned char const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::acquire()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::~Camera()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::Camera(libcamera::PipelineHandler*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::set<libcamera::Stream*, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraConfiguration::addConfiguration(libcamera::StreamConfiguration const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::at(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::at(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::begin()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::begin() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::~CameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::CameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::empty() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::end()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::end() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraConfiguration::size() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::configure(libcamera::CameraConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::controls()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraControlValidator::~CameraControlValidator()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraControlValidator::CameraControlValidator(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraControlValidator::name[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraControlValidator::validate(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::create(libcamera::PipelineHandler*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::set<libcamera::Stream*, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::createRequest(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraData::~CameraData()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::disconnect()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::exportFrameBuffers(libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::generateConfiguration(std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::addCamera(std::shared_ptr<libcamera::Camera>, std::vector<unsigned long, std::allocator<unsigned long> > const&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CameraManager::~CameraManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::CameraManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::cameras() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::eventDispatcher()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::get(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::Private::addCamera(std::shared_ptr<libcamera::Camera>, std::vector<unsigned long, std::allocator<unsigned long> > const&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CameraManager::Private::cleanup()@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::createPipelineHandlers()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CameraManager::Private::init()@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::~Private()@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::Private(libcamera::CameraManager*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::removeCamera(libcamera::Camera*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::run()@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::Private::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::CameraManager::removeCamera(std::shared_ptr<libcamera::Camera>)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CameraManager::self_@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::setEventDispatcher(std::unique_ptr<libcamera::EventDispatcher, std::default_delete<libcamera::EventDispatcher> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::start()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::stop()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraManager::version_[abi:cxx11]@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::name[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::Private::disconnect()@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::Private::isAccessAllowed(libcamera::Camera::Private::State, bool) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::Private::isAccessAllowed(libcamera::Camera::Private::State, libcamera::Camera::Private::State, bool) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::Private::~Private()@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::Private::Private(libcamera::PipelineHandler*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::set<libcamera::Stream*, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::Private::setState(libcamera::Camera::Private::State)@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::properties()@Base" 0~git20200417+35269f0
 (c++)"libcamera::Camera::queueRequest(libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::release()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::requestComplete(libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::~CameraSensor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::CameraSensor(libcamera::MediaEntity const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::controls() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::getControls(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::CameraSensor::getFormat(std::vector<unsigned int, std::allocator<unsigned int> > const&, libcamera::Size const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::init()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::logPrefix[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::sensorInfo(libcamera::CameraSensorInfo*) const@Base" 0~git20200513+924778e
 (c++)"libcamera::CameraSensor::setControls(libcamera::ControlList*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CameraSensor::setFormat(libcamera::V4L2SubdeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::start()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::stop()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Camera::streams() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::cio2BufferReady(libcamera::FrameBuffer*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::~CIO2Device()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::CIO2Device()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::CIO2Device()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::configure(libcamera::Size const&, libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::freeBuffers()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::generateConfiguration(libcamera::Size) const@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::init(libcamera::MediaDevice const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::queueBuffer(libcamera::Request*, libcamera::FrameBuffer*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::CIO2Device::start()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::stop()@Base" 0~git20200116+30f9624
 (c++)"libcamera::CIO2Device::tryReturnBuffer(libcamera::FrameBuffer*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::Control<bool>::~Control()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Control<bool>::Control(unsigned int, char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Control<float>::~Control()@Base" 0~git20200513+924778e
 (c++)"libcamera::Control<float>::Control(unsigned int, char const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlInfo::~ControlInfo()@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::ControlInfo&&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::ControlValue const&, libcamera::ControlValue const&, libcamera::ControlValue const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfoMap::at(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::at(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::~ControlInfoMap()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::ControlInfoMap(std::initializer_list<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfoMap::ControlInfoMap(std::unordered_map<libcamera::ControlId const*, libcamera::ControlInfo, std::hash<libcamera::ControlId const*>, std::equal_to<libcamera::ControlId const*>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> > >&&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfoMap::count(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::find(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::find(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::generateIdmap()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap libcamera::ControlSerializer::deserialize<libcamera::ControlInfoMap>(libcamera::ByteStreamBuffer&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlInfoMap::operator=(std::initializer_list<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfoMap::operator=(std::unordered_map<libcamera::ControlId const*, libcamera::ControlInfo, std::hash<libcamera::ControlId const*>, std::equal_to<libcamera::ControlId const*>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> > >&&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlInfo::toString[abi:cxx11]() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::Control<int>::~Control()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Control<int>::Control(unsigned int, char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Control<libcamera::Span<float const, 18446744073709551615ul> >::~Control()@Base" 0~git20200513+924778e
 (c++)"libcamera::Control<libcamera::Span<int const, 18446744073709551615ul> >::~Control()@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlList::contains(libcamera::ControlId const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::contains(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::ControlList()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::ControlList(libcamera::ControlInfoMap const&, libcamera::ControlValidator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::ControlList(std::unordered_map<unsigned int, libcamera::ControlId const*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > > const&, libcamera::ControlValidator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::find(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::find(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::get(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList libcamera::ControlSerializer::deserialize<libcamera::ControlList>(libcamera::ByteStreamBuffer&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlList::set(unsigned int, libcamera::ControlValue const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::AeConstraintMode@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::AeEnable@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::AeExposureMode@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::AeLocked@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::AeMeteringMode@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::AnalogueGain@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::AwbEnable@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::AwbMode@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::Brightness@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::ColourGains@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::ColourTemperature@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::Contrast@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::controls@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlInfo const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlInfoMap const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlList const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlValue const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::~ControlSerializer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::ControlSerializer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::loadControlInfo(libcamera::ControlType, libcamera::ByteStreamBuffer&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlSerializer::loadControlValue(libcamera::ControlType, libcamera::ByteStreamBuffer&, bool, unsigned int)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlSerializer::reset()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::serialize(libcamera::ControlInfoMap const&, libcamera::ByteStreamBuffer&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::serialize(libcamera::ControlList const&, libcamera::ByteStreamBuffer&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlSerializer::store(libcamera::ControlInfo const&, libcamera::ByteStreamBuffer&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlSerializer::store(libcamera::ControlValue const&, libcamera::ByteStreamBuffer&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::ExposureTime@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::ExposureValue@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::Lux@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::Saturation@Base" 0~git20200116+30f9624
 (c++)"libcamera::controls::SensorBlackLevels@Base" 0~git20200513+924778e
 (c++)"libcamera::controls::Sharpness@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::ControlValue::ControlValue()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlValue::~ControlValue()@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::ControlValue<bool, decltype(nullptr)>(bool const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue<float, decltype(nullptr)>(float const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue<int, decltype(nullptr)>(int const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::ControlValue::ControlValue(libcamera::ControlValue const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::data()@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::data() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::operator=(libcamera::ControlValue const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::operator==(libcamera::ControlValue const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ControlValue::release()@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::reserve(libcamera::ControlType, bool, unsigned long)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::set(libcamera::ControlType, bool, void const*, unsigned long, unsigned long)@Base" 0~git20200417+35269f0
 (c++)"libcamera::ControlValue::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumerator::addDevice(std::unique_ptr<libcamera::MediaDevice, std::default_delete<libcamera::MediaDevice> >&&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::DeviceEnumerator::create()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumerator::createDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumerator::~DeviceEnumerator()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumerator::removeDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumerator::search(libcamera::DeviceMatch const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorSysfs::~DeviceEnumeratorSysfs()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorSysfs::enumerate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorSysfs::init()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorSysfs::lookupDeviceNode[abi:cxx11](int, int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorSysfs::populateMediaDevice(libcamera::MediaDevice*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::DeviceEnumeratorUdev::addUdevDevice(udev_device*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::addV4L2Device(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::~DeviceEnumeratorUdev()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::DeviceEnumeratorUdev()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::enumerate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::init()@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::lookupDeviceNode[abi:cxx11](unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceEnumeratorUdev::populateMediaDevice(libcamera::MediaDevice*, std::map<unsigned long, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > > >*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::DeviceEnumeratorUdev::udevNotify(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceMatch::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceMatch::DeviceMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::DeviceMatch::match(libcamera::MediaDevice const*) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcher::~EventDispatcher()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::~EventDispatcherPoll()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::EventDispatcherPoll()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::EventNotifierSetPoll::events() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::interrupt()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::poll(std::vector<pollfd, std::allocator<pollfd> >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::processEvents()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::processInterrupt(pollfd const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::processNotifiers(std::vector<pollfd, std::allocator<pollfd> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::processTimers()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::registerEventNotifier(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::registerTimer(libcamera::Timer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::unregisterEventNotifier(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventDispatcherPoll::unregisterTimer(libcamera::Timer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventNotifier::~EventNotifier()@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventNotifier::EventNotifier(int, libcamera::EventNotifier::Type, libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventNotifier::message(libcamera::Message*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::EventNotifier::setEnabled(bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::File::close()@Base" 0~git20200417+35269f0
 (c++)"libcamera::FileDescriptor::Descriptor::~Descriptor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::Descriptor::Descriptor(int, bool)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::FileDescriptor::Descriptor::Descriptor(int, bool)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::FileDescriptor::dup() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::~FileDescriptor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::FileDescriptor(int&&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::FileDescriptor::FileDescriptor(int const&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::FileDescriptor::FileDescriptor(libcamera::FileDescriptor&&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::FileDescriptor(libcamera::FileDescriptor const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::operator=(libcamera::FileDescriptor&&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FileDescriptor::operator=(libcamera::FileDescriptor const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::File::exists() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::exists(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::~File()@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::File()@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::File(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::map(long, long, libcamera::File::MapFlag)@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::open(libcamera::File::OpenMode)@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::setFileName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::size() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::unmapAll()@Base" 0~git20200417+35269f0
 (c++)"libcamera::File::unmap(unsigned char*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::FrameBufferAllocator::allocate(libcamera::Stream*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FrameBufferAllocator::buffers(libcamera::Stream*) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::FrameBufferAllocator::~FrameBufferAllocator()@Base" 0~git20200116+30f9624
 (c++)"libcamera::FrameBufferAllocator::FrameBufferAllocator(std::shared_ptr<libcamera::Camera>)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FrameBufferAllocator::free(libcamera::Stream*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::FrameBuffer::copyFrom(libcamera::FrameBuffer const*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::FrameBuffer::FrameBuffer(std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImageFormats::addFormat(unsigned int, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImageFormats::data() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImageFormats::formats() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImageFormats::isEmpty() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImageFormats::sizes(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::allocateBuffers(unsigned int)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::ImgUDevice::configureInput(libcamera::Size const&, libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::configureVideoDevice(libcamera::V4L2VideoDevice*, unsigned int, libcamera::StreamConfiguration const&, libcamera::V4L2DeviceFormat*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::ImgUDevice::enableLinks(bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::freeBuffers()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::ImgUDevice::init(libcamera::MediaDevice*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::linkSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::start()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ImgUDevice::stop()@Base" 0~git20200116+30f9624
 (c++)"libcamera::InvokeMessage::invoke()@Base" 0~git20200116+30f9624
 (c++)"libcamera::InvokeMessage::~InvokeMessage()@Base" 0~git20200116+30f9624
 (c++)"libcamera::InvokeMessage::InvokeMessage(libcamera::BoundMethodBase*, std::shared_ptr<libcamera::BoundMethodPackBase>, libcamera::Semaphore*, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::callbacks_@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAContextWrapper::doQueueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAContextWrapper::~IPAContextWrapper()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::IPAContextWrapper(ipa_context*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::queue_frame_action(void*, unsigned int, ipa_operation_data&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAContextWrapper::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAContextWrapper::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAContextWrapper::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAInterface::~IPAInterface()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::addDir(char const*, unsigned int)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::createIPA(libcamera::PipelineHandler*, unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAManager::~IPAManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAManager::IPAManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAManager::isSignatureValid(libcamera::IPAModule*) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::parseDir(char const*, unsigned int, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::pubKey_@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::publicKeyData_@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAManager::self_@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::IPAModule::createContext()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::info() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::~IPAModule()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::IPAModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::isValid() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::load()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::loadIPAModuleInfo()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::logPrefix[abi:cxx11]() const@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAModule::match(libcamera::PipelineHandler*, unsigned int, unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::path[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAModule::signature() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAOperationData::IPAOperationData(libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxy::configurationFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyFactory::factories()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyFactory::IPAProxyFactory(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyFactory::registerType(libcamera::IPAProxyFactory*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxy::~IPAProxy()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxy::IPAProxy(libcamera::IPAModule*)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyLinux::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyLinuxFactory::create(libcamera::IPAModule*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinuxFactory::~IPAProxyLinuxFactory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyLinux::~IPAProxyLinux()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::IPAProxyLinux(libcamera::IPAModule*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::readyRead(libcamera::IPCUnixSocket*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyLinux::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyLinux::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyLinux::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxy::resolvePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPAProxyThread::configure(libcamera::CameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap const&, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyThreadFactory::create(libcamera::IPAModule*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThreadFactory::~IPAProxyThreadFactory()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::init(libcamera::IPASettings const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::IPAProxyThread::~IPAProxyThread()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::IPAProxyThread(libcamera::IPAModule*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::ThreadProxy::processEvent(libcamera::IPAOperationData const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::ThreadProxy::start()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::ThreadProxy::stop()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::ThreadProxy::~ThreadProxy()@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPAProxyThread::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::IPCUnixSocket::bind(int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::close()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::create()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::dataNotifier(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::~IPCUnixSocket()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::IPCUnixSocket()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::isBound() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::receive(libcamera::IPCUnixSocket::Payload*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::recvData(void*, unsigned long, int*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::sendData(void const*, unsigned long, int const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPCUnixSocket::send(libcamera::IPCUnixSocket::Payload const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraConfiguration::adjustStream(libcamera::StreamConfiguration&, bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraConfiguration::assignStreams()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::IPU3CameraConfiguration::~IPU3CameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraConfiguration::IPU3CameraConfiguration(libcamera::Camera*, libcamera::IPU3CameraData*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraConfiguration::validate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraData::cio2BufferReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraData::imguOutputBufferReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::IPU3CameraData::~IPU3CameraData()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryAllocator()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryBuffer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryCamera()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryCameraSensor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryControls()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogCategory::defaultCategory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryDeviceEnumerator()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryEvent()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryFile()@Base" 0~git20200417+35269f0
 (c++)"libcamera::logCategoryFileDescriptor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryFormats()@Base" 0~git20200513+924778e
 (c++)"libcamera::logCategoryIPAManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPAModule()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPAProxy()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPCUnixSocket()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryIPU3()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogCategory::~LogCategory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogCategory::LogCategory(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryMediaDevice()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryMessage()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryObject()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryPipeline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryProcess()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryRequest()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryRkISP1()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryRPI()@Base" 0~git20200513+924778e
 (c++)"libcamera::logCategoryRPI_S_W()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::logCategorySerialization()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategorySerializer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogCategory::setSeverity(libcamera::LogSeverity)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategorySimplePipeline()@Base" 0~git20200513+924778e
 (c++)"libcamera::logCategoryStream()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryThread()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryTimeline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryTimer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryUVC()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryV4L2()@Base" 0~git20200116+30f9624
 (c++)"libcamera::logCategoryVIMC()@Base" 0~git20200116+30f9624
 (c++)"libcamera::_log(char const*, unsigned int, libcamera::LogCategory const&, libcamera::LogSeverity)@Base" 0~git20200116+30f9624
 (c++)"libcamera::_log(char const*, unsigned int, libcamera::LogSeverity)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Loggable::_log(char const*, unsigned int, libcamera::LogCategory const&, libcamera::LogSeverity) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Loggable::_log(char const*, unsigned int, libcamera::LogSeverity) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Loggable::~Loggable()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::backtrace()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::instance()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::~Logger()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::Logger()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::logSetFile(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::logSetLevel(char const*, char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::logSetStream(std::basic_ostream<char, std::char_traits<char> >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::logSetTarget(libcamera::LoggingTarget)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::parseLogFile()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::parseLogLevels()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::parseLogLevel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::registerCategory(libcamera::LogCategory*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::unregisterCategory(libcamera::LogCategory*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Logger::write(libcamera::LogMessage const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogMessage::init(char const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogMessage::~LogMessage()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogMessage::LogMessage(char const*, unsigned int, libcamera::LogCategory const&, libcamera::LogSeverity)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogMessage::LogMessage(char const*, unsigned int, libcamera::LogSeverity)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogMessage::LogMessage(libcamera::LogMessage&&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::isValid() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::~LogOutput()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::LogOutput()@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::LogOutput(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::LogOutput(std::basic_ostream<char, std::char_traits<char> >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::write(libcamera::LogMessage const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::write(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::writeStream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::LogOutput::writeSyslog(libcamera::LogSeverity, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logSetFile(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logSetLevel(char const*, char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logSetStream(std::basic_ostream<char, std::char_traits<char> >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::logSetTarget(libcamera::LoggingTarget)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::acquire()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::addObject(libcamera::MediaObject*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::clear()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::close()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::disableLinks()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::findInterface(media_v2_topology const&, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::fixupEntityFlags(media_v2_entity*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::getEntityByName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::link(libcamera::MediaEntity const*, unsigned int, libcamera::MediaEntity const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::link(libcamera::MediaPad const*, libcamera::MediaPad const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::link(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::lock()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::logPrefix[abi:cxx11]() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::MediaDevice::~MediaDevice()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::MediaDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::object(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::open()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::populate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::populateEntities(media_v2_topology const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::populateLinks(media_v2_topology const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::populatePads(media_v2_topology const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::release()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::setupLink(libcamera::MediaLink const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaDevice::unlock()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::addPad(libcamera::MediaPad*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::getPadById(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::getPadByIndex(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::~MediaEntity()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::MediaEntity(libcamera::MediaDevice*, media_v2_entity const*, unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaEntity::setDeviceNode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaLink::~MediaLink()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaLink::MediaLink(media_v2_link const*, libcamera::MediaPad*, libcamera::MediaPad*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaLink::setEnabled(bool)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaPad::addLink(libcamera::MediaLink*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaPad::~MediaPad()@Base" 0~git20200116+30f9624
 (c++)"libcamera::MediaPad::MediaPad(media_v2_pad const*, libcamera::MediaEntity*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Message::~Message()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Message::Message(libcamera::Message::Type)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Message::nextUserType_@Base" 0~git20200116+30f9624
 (c++)"libcamera::Message::registerMessageType()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::connect(libcamera::SignalBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::disconnect(libcamera::SignalBase*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::message(libcamera::Message*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::moveToThread(libcamera::Thread*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::notifyThreadMove()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::~Object()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::Object(libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Object::postMessage(std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::operator==(libcamera::Rectangle const&, libcamera::Rectangle const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::operator<(libcamera::Size const&, libcamera::Size const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::operator==(libcamera::Size const&, libcamera::Size const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::operator==(libcamera::SizeRange const&, libcamera::SizeRange const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::acquireMediaDevice(libcamera::DeviceEnumerator*, libcamera::DeviceMatch const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::cameraData(libcamera::Camera const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::completeBuffer(libcamera::Camera*, libcamera::Request*, libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::completeRequest(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::controls(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::disconnect()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerFactory::create(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerFactory::factories()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerFactory::PipelineHandlerFactory(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerFactory::registerType(libcamera::PipelineHandlerFactory*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::hotplugMediaDevice(libcamera::MediaDevice*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::allocateBuffers(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3Factory::createInstance(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3Factory::~PipelineHandlerIPU3Factory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::freeBuffers(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::match(libcamera::DeviceEnumerator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::~PipelineHandlerIPU3()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::PipelineHandlerIPU3(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::registerCameras()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::start(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerIPU3::stop(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::lock()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::mediaDeviceDisconnected(libcamera::MediaDevice*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::~PipelineHandler()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::PipelineHandler(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::properties(libcamera::Camera*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::PipelineHandler::queueRequest(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandler::registerCamera(std::shared_ptr<libcamera::Camera>, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> >)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::PipelineHandlerRkISP1::allocateBuffers(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::bufferReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::createCamera(libcamera::MediaEntity*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1Factory::createInstance(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1Factory::~PipelineHandlerRkISP1Factory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::freeBuffers(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::initLinks()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::match(libcamera::DeviceEnumerator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::paramReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::~PipelineHandlerRkISP1()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::PipelineHandlerRkISP1(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::start(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::statReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::stop(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRkISP1::tryCompleteRequest(libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerRPi::configureIPA(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPiFactory::createInstance(libcamera::CameraManager*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPiFactory::~PipelineHandlerRPiFactory()@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::freeBuffers(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::match(libcamera::DeviceEnumerator*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::~PipelineHandlerRPi()@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::PipelineHandlerRPi(libcamera::CameraManager*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::prepareBuffers(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::queueAllBuffers(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::start(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerRPi::stop(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandler::unlock()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVCFactory::createInstance(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVCFactory::~PipelineHandlerUVCFactory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::match(libcamera::DeviceEnumerator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::~PipelineHandlerUVC()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::PipelineHandlerUVC(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::processControl(libcamera::ControlList*, unsigned int, libcamera::ControlValue const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::PipelineHandlerUVC::processControls(libcamera::UVCCameraData*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::start(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerUVC::stop(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimcFactory::createInstance(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimcFactory::~PipelineHandlerVimcFactory()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::match(libcamera::DeviceEnumerator*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::~PipelineHandlerVimc()@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::PipelineHandlerVimc(libcamera::CameraManager*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::processControls(libcamera::VimcCameraData*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::start(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PipelineHandlerVimc::stop(libcamera::Camera*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::PixelFormatInfo::info(libcamera::PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::PixelFormat::operator<(libcamera::PixelFormat const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::PixelFormat::operator==(libcamera::PixelFormat const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::PixelFormat::toString[abi:cxx11]() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::Process::closeAllFdsExcept(std::vector<int, std::allocator<int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::died(int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::isolate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::kill()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::instance()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::oldsa() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::~ProcessManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::ProcessManager()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::registerProcess(libcamera::Process*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::sighandler(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::ProcessManager::writePipe() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::~Process()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::Process()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Process::start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<int, std::allocator<int> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::properties::Location@Base" 0~git20200417+35269f0
 (c++)"libcamera::properties::properties@Base" 0~git20200417+35269f0
 (c++)"libcamera::properties::Rotation@Base" 0~git20200417+35269f0
 (c++)"libcamera::PubKey::~PubKey()@Base" 0~git20200417+35269f0
 (c++)"libcamera::PubKey::PubKey(libcamera::Span<unsigned char const, 18446744073709551615ul>)@Base" 0~git20200417+35269f0
 (c++)"libcamera::PubKey::verify(libcamera::Span<unsigned char const, 18446744073709551615ul>, libcamera::Span<unsigned char const, 18446744073709551615ul>) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::Rectangle::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::addBuffer(libcamera::Stream*, libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::complete()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::completeBuffer(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::findBuffer(libcamera::Stream*) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::~Request()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Request::Request(libcamera::Camera*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1ActionQueueBuffers::~RkISP1ActionQueueBuffers()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1ActionQueueBuffers::run()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1ActionSetSensor::~RkISP1ActionSetSensor()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1ActionSetSensor::run()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraConfiguration::~RkISP1CameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraConfiguration::RkISP1CameraConfiguration(libcamera::Camera*, libcamera::RkISP1CameraData*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraConfiguration::validate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraData::loadIPA()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraData::metadataReady(unsigned int, libcamera::ControlList const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraData::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1CameraData::~RkISP1CameraData()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::clear()@Base" 0~git20200417+35269f0
 (c++)"libcamera::RkISP1Frames::create(unsigned int, libcamera::Request*, libcamera::Stream*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::destroy(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::find(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::find(libcamera::Request*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::find(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Frames::RkISP1Frames(libcamera::PipelineHandler*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::RkISP1Timeline::~RkISP1Timeline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::RPiCameraConfiguration::~RPiCameraConfiguration()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraConfiguration::RPiCameraConfiguration(libcamera::RPiCameraData const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraConfiguration::validate()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::checkRequestCompleted()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::clearIncompleteRequests()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::frameStarted(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::handleState()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::handleStreamBuffer(libcamera::FrameBuffer*, libcamera::RPiStream const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::ispInputDequeue(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::ispOutputDequeue(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::loadIPA()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::queueFrameAction(unsigned int, libcamera::IPAOperationData const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::~RPiCameraData()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::RPiCameraData(libcamera::PipelineHandler*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::tryFlushQueues()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::tryRunPipeline()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::unicamBufferDequeue(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiCameraData::updateQueue(std::queue<libcamera::FrameBuffer*, std::deque<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> > >&, unsigned long, libcamera::V4L2VideoDevice*)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPi::StaggeredCtrl::get(std::unordered_map<unsigned int, int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, int> > >&, unsigned char)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::init(libcamera::V4L2VideoDevice*, std::initializer_list<std::pair<unsigned int const, unsigned char> >)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::nextFrame()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::reset()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::set(libcamera::ControlList&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::set(std::initializer_list<std::pair<unsigned int const, int> >)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::set(unsigned int, int)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::~StaggeredCtrl()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::~StaggeredCtrl()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPi::StaggeredCtrl::write()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::RPiStream::operator=(libcamera::RPiStream&&)@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiStream::queueBuffers()@Base" 0~git20200513+924778e
 (c++)"libcamera::RPiStream::~RPiStream()@Base" 0~git20200513+924778e
 (c++)"libcamera::Semaphore::acquire(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Semaphore::available()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Semaphore::release(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Semaphore::Semaphore(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Semaphore::tryAcquire(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::SignalBase::connect(libcamera::BoundMethodBase*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::SignalBase::disconnect(libcamera::Object*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::SignalBase::disconnect(std::function<bool (std::_List_iterator<libcamera::BoundMethodBase*>&)>)@Base" 0~git20200417+35269f0
 (c++)"libcamera::SignalBase::slots[abi:cxx11]()@Base" 0~git20200417+35269f0
 (c++)"libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::SimpleCameraConfiguration::~SimpleCameraConfiguration()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraConfiguration::SimpleCameraConfiguration(libcamera::Camera*, libcamera::SimpleCameraData*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraConfiguration::validate()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraData::init()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraData::setupFormats(libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraData::setupLinks()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraData::~SimpleCameraData()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleCameraData::SimpleCameraData(libcamera::SimplePipelineHandler*, libcamera::MediaEntity*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::captureBufferReady(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::close()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::configure(libcamera::PixelFormat, libcamera::Size const&, libcamera::StreamConfiguration*)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::SimpleConverter::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::formats(libcamera::PixelFormat)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::open()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::outputBufferReady(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::queueBuffers(libcamera::FrameBuffer*, libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::~SimpleConverter()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::SimpleConverter(libcamera::MediaDevice*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::sizes(libcamera::Size const&)@Base" 0~git20200629+e7aa92a
 (c++)"libcamera::SimpleConverter::start(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimpleConverter::stop()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::bufferReady(libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::converterDone(libcamera::FrameBuffer*, libcamera::FrameBuffer*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandlerFactory::createInstance(libcamera::CameraManager*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandlerFactory::~SimplePipelineHandlerFactory()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::match(libcamera::DeviceEnumerator*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::~SimplePipelineHandler()@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::SimplePipelineHandler(libcamera::CameraManager*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::start(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::stop(libcamera::Camera*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::subdev(libcamera::MediaEntity const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SimplePipelineHandler::video(libcamera::MediaEntity const*)@Base" 0~git20200513+924778e
 (c++)"libcamera::SizeRange::contains(libcamera::Size const&) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::SizeRange::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Size::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamConfiguration::StreamConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamConfiguration::StreamConfiguration(libcamera::StreamFormats const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamConfiguration::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamFormats::pixelformats() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamFormats::range(libcamera::PixelFormat const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::StreamFormats::sizes(libcamera::PixelFormat const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::StreamFormats::StreamFormats()@Base" 0~git20200116+30f9624
 (c++)"libcamera::StreamFormats::StreamFormats(std::map<libcamera::PixelFormat, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::Stream::Stream()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::current()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::currentId()@Base" 0~git20200417+35269f0
 (c++)"libcamera::ThreadData::current()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::dispatchMessages()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::eventDispatcher()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::exec()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::exit(int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::finishThread()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::isRunning()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ThreadMain::run()@Base" 0~git20200116+30f9624
 (c++)"libcamera::ThreadMain::~ThreadMain()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::moveObject(libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::moveObject(libcamera::Object*, libcamera::ThreadData*, libcamera::ThreadData*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::postMessage(std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >, libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::removeMessages(libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::run()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::setEventDispatcher(std::unique_ptr<libcamera::EventDispatcher, std::default_delete<libcamera::EventDispatcher> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::start()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::startThread()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::~Thread()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::Thread()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Thread::wait(std::chrono::duration<long, std::ratio<1l, 1000000000l> >)@Base" 0~git20200417+35269f0
 (c++)"libcamera::Timeline::frameOffset(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::notifyStartOfExposure(unsigned int, std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::reset()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::scheduleAction(std::unique_ptr<libcamera::FrameAction, std::default_delete<libcamera::FrameAction> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::setRawDelay(unsigned int, int, std::chrono::duration<long, std::ratio<1l, 1000000000l> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::~Timeline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::Timeline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::timeOffset(unsigned int) const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::timeout(libcamera::Timer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timeline::updateDeadline()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::isRunning() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::message(libcamera::Message*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::registerTimer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::start(std::chrono::duration<long, std::ratio<1l, 1000l> >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::start(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::stop()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::~Timer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::Timer(libcamera::Object*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::Timer::unregisterTimer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::basename(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::details::StringSplitter::begin() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::end() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::iterator::iterator(libcamera::utils::details::StringSplitter const*, unsigned long)@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator*[abi:cxx11]() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator++()@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator!=(libcamera::utils::details::StringSplitter::iterator const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::details::StringSplitter::StringSplitter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::dirname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::duration_to_timespec(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::isLibcameraInstalled()@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::libcameraBuildPath[abi:cxx11]()@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::libcameraSourcePath[abi:cxx11]()@Base" 0~git20200513+924778e
 (c++)"libcamera::utils::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::utils::_hex const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::secure_getenv(char const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::utils::strlcpy(char*, char const*, unsigned long)@Base" 0~git20200116+30f9624
 (c++)"libcamera::utils::time_point_to_string[abi:cxx11](std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraConfiguration::~UVCCameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraConfiguration::UVCCameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraConfiguration::validate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraData::addControl(unsigned int, libcamera::ControlInfo const&, std::unordered_map<libcamera::ControlId const*, libcamera::ControlInfo, std::hash<libcamera::ControlId const*>, std::equal_to<libcamera::ControlId const*>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> > >*)@Base" 0~git20200513+924778e
 (c++)"libcamera::UVCCameraData::bufferReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraData::init(libcamera::MediaEntity*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::UVCCameraData::~UVCCameraData()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::Entry::Entry()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::Entry::Entry(bool, unsigned long, libcamera::FrameBuffer const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2BufferCache::Entry::operator==(libcamera::FrameBuffer const&) const@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2BufferCache::get(libcamera::FrameBuffer const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::put(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::~V4L2BufferCache()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::V4L2BufferCache(std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2BufferCache::V4L2BufferCache(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2ControlId::V4L2ControlId(v4l2_query_ext_ctrl const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2ControlInfo::V4L2ControlInfo(v4l2_query_ext_ctrl const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2Device::close()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2DeviceFormat::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::getControls(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2Device::ioctl(unsigned long, void*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::listControls()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::open(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::setControls(libcamera::ControlList*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::setFd(int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::updateControls(libcamera::ControlList*, v4l2_ext_control const*, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::~V4L2Device()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Device::V4L2Device(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2M2MDevice::close()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2M2MDevice::open()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2M2MDevice::~V4L2M2MDevice()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2M2MDevice::V4L2M2MDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2PixelFormat::fromPixelFormat(libcamera::PixelFormat const&, bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2PixelFormat::toPixelFormat() const@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2PixelFormat::toString[abi:cxx11]() const@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2Subdevice::enumPadCodes(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::enumPadSizes(unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2SubdeviceFormat::bitsPerPixel() const@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2Subdevice::formats(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2SubdeviceFormat::toString[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::fromEntityName(libcamera::MediaDevice const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::getFormat(unsigned int, libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2Subdevice::getSelection(unsigned int, unsigned int, libcamera::Rectangle*)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2Subdevice::logPrefix[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::open()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::setFormat(unsigned int, libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2Subdevice::setSelection(unsigned int, unsigned int, libcamera::Rectangle*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::~V4L2Subdevice()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2Subdevice::V4L2Subdevice(libcamera::MediaEntity const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::allocateBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::bufferAvailable(libcamera::EventNotifier*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::close()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::createBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::createBuffer(unsigned int)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::dequeueBuffer()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::enumPixelformats(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2VideoDevice::enumSizes(libcamera::V4L2PixelFormat)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::eventAvailable(libcamera::EventNotifier*)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2VideoDevice::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::exportDmabufFd(unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::formats(unsigned int)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2VideoDevice::fromEntityName(libcamera::MediaDevice const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::getFormat(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::getFormatMeta(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::getFormatMultiplane(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::getFormatSingleplane(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::importBuffers(unsigned int)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::logPrefix[abi:cxx11]() const@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::open()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::open(int, v4l2_buf_type)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::queueBuffer(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::releaseBuffers()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::requestBuffers(unsigned int, v4l2_memory)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::setFormat(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::setFormatMeta(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::setFormatMultiplane(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::setFormatSingleplane(libcamera::V4L2DeviceFormat*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::setFrameStartEnabled(bool)@Base" 0~git20200513+924778e
 (c++)"libcamera::V4L2VideoDevice::setSelection(unsigned int, libcamera::Rectangle*)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::streamOff()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::streamOn()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::toV4L2PixelFormat(libcamera::PixelFormat const&)@Base" 0~git20200417+35269f0
 (c++)"libcamera::V4L2VideoDevice::~V4L2VideoDevice()@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::V4L2VideoDevice(libcamera::MediaEntity const*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::V4L2VideoDevice::V4L2VideoDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"libcamera::VimcCameraConfiguration::validate()@Base" 0~git20200116+30f9624
 (c++)"libcamera::VimcCameraConfiguration::~VimcCameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::VimcCameraConfiguration::VimcCameraConfiguration()@Base" 0~git20200116+30f9624
 (c++)"libcamera::VimcCameraData::bufferReady(libcamera::FrameBuffer*)@Base" 0~git20200116+30f9624
 (c++)"libcamera::VimcCameraData::init()@Base" 0~git20200513+924778e
 (c++)"libcamera::VimcCameraData::~VimcCameraData()@Base" 0~git20200116+30f9624
 (c++)"non-virtual thunk to libcamera::IPAProxyThread::~IPAProxyThread()@Base" 0~git20200417+35269f0
 (c++)"RPi::Vcsm::alloc(char const*, unsigned int, vc_sm_cma_cache_e)@Base" 0~git20200513+924778e
 (c++)"RPi::Vcsm::~Vcsm()@Base" 0~git20200513+924778e
 (c++)"std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()@Base" 0~git20200629+e7aa92a
 (c++)"std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()@Base" 0~git20200629+e7aa92a
 (c++)"std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2> > >::~__allocated_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::ctype<char>::do_narrow(char, char) const@Base" 0~git20200513+924778e
 (c++)"std::ctype<char>::do_widen(char) const@Base" 0~git20200116+30f9624
 (c++)"std::__cxx11::basic_regex<char, std::__cxx11::regex_traits<char> >::~basic_regex()@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_stringbuf<char, std::char_traits<char>, std::allocator<char> >::~basic_stringbuf()@Base" 0~git20200116+30f9624
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)@Base" 0~git20200417+35269f0
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::__cxx11::regex_traits<char>::lookup_collatename<char const*>(char const*, char const*) const@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::__cxx11::regex_traits<char>::transform_primary<char const*>(char const*, char const*) const@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::_List_base<libcamera::BoundMethodBase*, std::allocator<libcamera::BoundMethodBase*> >::_M_clear()@Base" 0~git20200417+35269f0
 (c++)"std::__cxx11::list<libcamera::DeviceEnumeratorUdev::MediaDeviceDeps, std::allocator<libcamera::DeviceEnumeratorUdev::MediaDeviceDeps> >::remove(libcamera::DeviceEnumeratorUdev::MediaDeviceDeps const&)@Base" 0~git20200116+30f9624
 (c++)"std::__cxx11::regex_traits<char>::lookup_classname<char const*>(char const*, char const*, bool) const::__classnames@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::regex_traits<char>::lookup_collatename<char const*>(char const*, char const*) const::__collatenames@Base" 0~git20200513+924778e
 (c++)"std::__cxx11::regex_traits<char>::_RegexMask std::__cxx11::regex_traits<char>::lookup_classname<char const*>(char const*, char const*, bool) const@Base" 0~git20200513+924778e
 (c++)"std::_Deque_base<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> >::~_Deque_base()@Base" 0~git20200116+30f9624
 (c++)"std::_Deque_base<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> >::_M_initialize_map(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::_Deque_base<long, std::allocator<long> >::~_Deque_base()@Base" 0~git20200513+924778e
 (c++)"std::_Deque_base<long, std::allocator<long> >::_M_initialize_map(unsigned long)@Base" 0~git20200513+924778e
 (c++)"std::_Deque_base<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > > >::~_Deque_base()@Base" 0~git20200513+924778e
 (c++)"std::deque<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> >::_M_reallocate_map(unsigned long, bool)@Base" 0~git20200116+30f9624
 (c++)"std::deque<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > > >::_M_reallocate_map(unsigned long, bool)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>::operator()(char) const::__nul@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::~_BracketMatcher()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>::_M_ready()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>::~_BracketMatcher()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>::_M_make_range(char, char)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>::~_BracketMatcher()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>::~_BracketMatcher()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>::_M_apply(char, std::integral_constant<bool, false>) const::{lambda()#1}::operator()() const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>::_M_make_range(char, char)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_Compiler(char const*, char const*, std::locale const&, std::regex_constants::syntax_option_type)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_alternative()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_assertion()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_atom()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_bracket_expression()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_disjunction()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_quantifier()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_try_char()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::~_Executor()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_dfs(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_handle_backref(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_is_word(char) const::__s@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_lookahead(long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_rep_once_more(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, false>::_M_word_boundary() const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_dfs(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_handle_backref(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_is_word(char) const::__s@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_lookahead(long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_rep_once_more(std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_Match_mode, long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Executor<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::regex_traits<char>, true>::_M_word_boundary() const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false>* std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > >::operator()<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&>(std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> const&) const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, int>, std::allocator<std::pair<unsigned int const, int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int&&)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, int>, std::allocator<std::pair<unsigned int const, int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::__detail::_Map_base<unsigned int, std::pair<unsigned int const, libcamera::RPi::StaggeredCtrl::CircularArray>, std::allocator<std::pair<unsigned int const, libcamera::RPi::StaggeredCtrl::CircularArray> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true>, true>::operator[](unsigned int const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_backref(unsigned long)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_dummy()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_matcher(std::function<bool (char)>)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_repeat(long, long, bool)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_subexpr_begin()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_NFA<std::__cxx11::regex_traits<char> >::_M_insert_subexpr_end()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_RegexTranslatorBase<std::__cxx11::regex_traits<char>, false, true>::_M_transform(char) const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_RegexTranslatorBase<std::__cxx11::regex_traits<char>, true, true>::_M_transform(char) const@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_eat_class(char)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_eat_escape_awk()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_eat_escape_ecma()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_eat_escape_posix()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_scan_in_brace()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_scan_in_bracket()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_M_scan_normal()@Base" 0~git20200513+924778e
 (c++)"std::__detail::_Scanner<char>::_Scanner(char const*, char const*, std::regex_constants::syntax_option_type, std::locale)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_State<char>::_State(std::__detail::_State<char>&&)@Base" 0~git20200513+924778e
 (c++)"std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >::_M_clone()@Base" 0~git20200513+924778e
 (c++)"std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)::__digits@Base" 0~git20200116+30f9624
 (c++)"std::__detail::__to_chars_10_impl<unsigned long>(char*, unsigned int, unsigned long)::__digits@Base" 0~git20200116+30f9624
 (c++)"std::_Function_base::~_Function_base()@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true> >::_M_invoke(std::_Any_data const&, char&&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (char), std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true> >::_M_manager(std::_Any_data&, std::_Any_data const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect<libcamera::CameraManager::Private, void>(libcamera::CameraManager::Private*, void (libcamera::CameraManager::Private::*)())::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect<libcamera::CameraManager::Private, void>(libcamera::CameraManager::Private*, void (libcamera::CameraManager::Private::*)())::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<>::disconnect<libcamera::CameraManager::Private, void>(libcamera::CameraManager::Private*, void (libcamera::CameraManager::Private::*)())::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Camera*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Camera*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Camera*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::EventNotifier*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::EventNotifier*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::EventNotifier*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::FrameBuffer*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::IPCUnixSocket*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::IPCUnixSocket*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::IPCUnixSocket*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::MediaDevice*>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Process*, libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Process*, libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Process*, libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Thread*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Thread*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Thread*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Timer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Timer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<libcamera::Timer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200513+924778e
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_invoke(std::_Any_data const&, std::_List_iterator<libcamera::BoundMethodBase*>&)@Base" 0~git20200417+35269f0
 (c++)"std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}>::_M_manager(std::_Any_data&, std::_Function_handler<bool (std::_List_iterator<libcamera::BoundMethodBase*>&), libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}> const&, std::_Manager_operation)@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@Base" 0~git20200417+35269f0
 (c++)"std::_Hashtable<libcamera::FrameBuffer*, libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*>, std::__detail::_Identity, std::equal_to<libcamera::FrameBuffer*>, std::hash<libcamera::FrameBuffer*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<libcamera::LogCategory*, libcamera::LogCategory*, std::allocator<libcamera::LogCategory*>, std::__detail::_Identity, std::equal_to<libcamera::LogCategory*>, std::hash<libcamera::LogCategory*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, int>, std::allocator<std::pair<unsigned int const, int> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable<std::pair<unsigned int const, libcamera::ControlId const*> const*>(std::pair<unsigned int const, libcamera::ControlId const*> const*, std::pair<unsigned int const, libcamera::ControlId const*> const*, unsigned long, std::hash<unsigned int> const&, std::__detail::_Mod_range_hashing const&, std::__detail::_Default_ranged_hash const&, std::equal_to<unsigned int> const&, std::__detail::_Select1st const&, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_rehash(unsigned long, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::clear()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::find(unsigned int const&) const@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >&&)@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_deallocate_buckets()@Base" 0~git20200116+30f9624
 (c++)"std::_Hashtable<unsigned int, std::pair<unsigned int const, unsigned char>, std::allocator<std::pair<unsigned int const, unsigned char> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Scoped_node::~_Scoped_node()@Base" 0~git20200513+924778e
 (c++)"std::map<libcamera::PixelFormat, libcamera::PixelFormatInfo, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> > >::~map()@Base" 0~git20200513+924778e
 (c++)"std::map<libcamera::PixelFormat, unsigned int, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, unsigned int> > >::~map()@Base" 0~git20200629+e7aa92a
 (c++)"std::map<libcamera::PixelFormat, unsigned int, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, unsigned int> > >::~map()@Base" 0~git20200629+e7aa92a
 (c++)"std::map<libcamera::V4L2PixelFormat, libcamera::PixelFormat, std::less<libcamera::V4L2PixelFormat>, std::allocator<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> > >::~map()@Base" 0~git20200513+924778e
 (c++)"std::map<unsigned int, libcamera::PixelFormat, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::PixelFormat> > >::~map()@Base" 0~git20200417+35269f0
 (c++)"std::pair<std::_Rb_tree_iterator<libcamera::Stream*>, bool> std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> >::_M_insert_unique<libcamera::Stream* const&>(libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<libcamera::MediaEntity const* const, libcamera::V4L2Subdevice> >, bool> std::_Rb_tree<libcamera::MediaEntity const*, std::pair<libcamera::MediaEntity const* const, libcamera::V4L2Subdevice>, std::_Select1st<std::pair<libcamera::MediaEntity const* const, libcamera::V4L2Subdevice> >, std::less<libcamera::MediaEntity const*>, std::allocator<std::pair<libcamera::MediaEntity const* const, libcamera::V4L2Subdevice> > >::_M_emplace_unique<std::piecewise_construct_t const&, std::tuple<libcamera::MediaEntity*&>, std::tuple<libcamera::MediaEntity*&> >(std::piecewise_construct_t const&, std::tuple<libcamera::MediaEntity*&>&&, std::tuple<libcamera::MediaEntity*&>&&)@Base" 0~git20200513+924778e
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<libcamera::MediaEntity const* const, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> > > >, bool> std::_Rb_tree<libcamera::MediaEntity const*, std::pair<libcamera::MediaEntity const* const, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> > >, std::_Select1st<std::pair<libcamera::MediaEntity const* const, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> > > >, std::less<libcamera::MediaEntity const*>, std::allocator<std::pair<libcamera::MediaEntity const* const, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> > > > >::_M_emplace_unique<libcamera::MediaEntity const*&, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> > >(libcamera::MediaEntity const*&, std::unique_ptr<libcamera::V4L2VideoDevice, std::default_delete<libcamera::V4L2VideoDevice> >&&)@Base" 0~git20200513+924778e
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, bool> std::_Rb_tree<libcamera::V4L2PixelFormat, std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::V4L2PixelFormat>, std::allocator<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_emplace_unique<libcamera::V4L2PixelFormat&, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >&>(libcamera::V4L2PixelFormat&, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >&)@Base" 0~git20200417+35269f0
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, bool> std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap const&>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > >::_M_emplace_unique<int, libcamera::ControlInfoMap const&>(int&&, libcamera::ControlInfoMap const&)@Base" 0~git20200116+30f9624
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<void* const, RPi::Vcsm::AllocInfo> >, bool> std::_Rb_tree<void*, std::pair<void* const, RPi::Vcsm::AllocInfo>, std::_Select1st<std::pair<void* const, RPi::Vcsm::AllocInfo> >, std::less<void*>, std::allocator<std::pair<void* const, RPi::Vcsm::AllocInfo> > >::_M_emplace_unique<void*&, RPi::Vcsm::AllocInfo>(void*&, RPi::Vcsm::AllocInfo&&)@Base" 0~git20200513+924778e
 (c++)"std::pair<std::_Rb_tree_iterator<std::pair<void* const, unsigned long> >, bool> std::_Rb_tree<void*, std::pair<void* const, unsigned long>, std::_Select1st<std::pair<void* const, unsigned long> >, std::less<void*>, std::allocator<std::pair<void* const, unsigned long> > >::_M_emplace_unique<void*&, long&>(void*&, long&)@Base" 0~git20200417+35269f0
 (c++)"std::pair<std::_Rb_tree_iterator<unsigned long>, bool> std::_Rb_tree<unsigned long, unsigned long, std::_Identity<unsigned long>, std::less<unsigned long>, std::allocator<unsigned long> >::_M_insert_unique<unsigned long const&>(unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree_header::_Rb_tree_header(std::_Rb_tree_header&&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<int, std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll>, std::_Select1st<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> >, std::less<int>, std::allocator<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> > >::_M_erase(std::_Rb_tree_node<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> >*)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<int, std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll>, std::_Select1st<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> >, std::less<int>, std::allocator<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> >, int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<int, std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll>, std::_Select1st<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> >, std::less<int>, std::allocator<std::pair<int const, libcamera::EventDispatcherPoll::EventNotifierSetPoll> > >::_M_get_insert_unique_pos(int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Camera const*, std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > >, std::_Select1st<std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > > >, std::less<libcamera::Camera const*>, std::allocator<std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > > >, libcamera::Camera const* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Camera const*, std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > >, std::_Select1st<std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > > >, std::less<libcamera::Camera const*>, std::allocator<std::pair<libcamera::Camera const* const, std::unique_ptr<libcamera::CameraData, std::default_delete<libcamera::CameraData> > > > >::_M_get_insert_unique_pos(libcamera::Camera const* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::ControlInfoMap const*, std::pair<libcamera::ControlInfoMap const* const, unsigned int>, std::_Select1st<std::pair<libcamera::ControlInfoMap const* const, unsigned int> >, std::less<libcamera::ControlInfoMap const*>, std::allocator<std::pair<libcamera::ControlInfoMap const* const, unsigned int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::ControlInfoMap const* const, unsigned int> >, libcamera::ControlInfoMap const* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::ControlInfoMap const*, std::pair<libcamera::ControlInfoMap const* const, unsigned int>, std::_Select1st<std::pair<libcamera::ControlInfoMap const* const, unsigned int> >, std::less<libcamera::ControlInfoMap const*>, std::allocator<std::pair<libcamera::ControlInfoMap const* const, unsigned int> > >::_M_get_insert_unique_pos(libcamera::ControlInfoMap const* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::MediaEntity*, libcamera::MediaEntity*, std::_Identity<libcamera::MediaEntity*>, std::less<libcamera::MediaEntity*>, std::allocator<libcamera::MediaEntity*> >::_M_erase(std::_Rb_tree_node<libcamera::MediaEntity*>*)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo>, std::_Select1st<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> >, libcamera::PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo>, std::_Select1st<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, libcamera::PixelFormatInfo> > >::_M_get_insert_unique_pos(libcamera::PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration>, std::_Select1st<std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration> >, libcamera::PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration>, std::_Select1st<std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, libcamera::SimpleCameraData::Configuration> > >::_M_get_insert_unique_pos(libcamera::PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::find(libcamera::PixelFormat const&) const@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_erase(std::_Rb_tree_node<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >*)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, libcamera::PixelFormat const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_get_insert_unique_pos(libcamera::PixelFormat const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_Rb_tree(std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > > const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, unsigned int>, std::_Select1st<std::pair<libcamera::PixelFormat const, unsigned int> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, unsigned int> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::PixelFormat const, unsigned int> >, libcamera::PixelFormat const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, unsigned int>, std::_Select1st<std::pair<libcamera::PixelFormat const, unsigned int> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, unsigned int> > >::_M_get_insert_unique_pos(libcamera::PixelFormat const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<libcamera::Stream const*, libcamera::Stream const*, std::_Identity<libcamera::Stream const*>, std::less<libcamera::Stream const*>, std::allocator<libcamera::Stream const*> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<libcamera::Stream const*>, libcamera::Stream const* const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<libcamera::Stream const*, libcamera::Stream const*, std::_Identity<libcamera::Stream const*>, std::less<libcamera::Stream const*>, std::allocator<libcamera::Stream const*> >::_M_get_insert_unique_pos(libcamera::Stream const* const&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> >::_M_erase(std::_Rb_tree_node<libcamera::Stream*>*)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<libcamera::Stream*>, libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> >::_M_get_insert_unique_pos(libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> >::_Rb_tree(std::_Rb_tree<libcamera::Stream*, libcamera::Stream*, std::_Identity<libcamera::Stream*>, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<libcamera::Stream*, std::pair<libcamera::Stream* const, libcamera::FrameBuffer*>, std::_Select1st<std::pair<libcamera::Stream* const, libcamera::FrameBuffer*> >, std::less<libcamera::Stream*>, std::allocator<std::pair<libcamera::Stream* const, libcamera::FrameBuffer*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::Stream* const, libcamera::FrameBuffer*> >, libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, std::pair<libcamera::Stream* const, libcamera::FrameBuffer*>, std::_Select1st<std::pair<libcamera::Stream* const, libcamera::FrameBuffer*> >, std::less<libcamera::Stream*>, std::allocator<std::pair<libcamera::Stream* const, libcamera::FrameBuffer*> > >::_M_get_insert_unique_pos(libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > >, std::_Select1st<std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > > >, std::less<libcamera::Stream*>, std::allocator<std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > > >, libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::Stream*, std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > >, std::_Select1st<std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > > >, std::less<libcamera::Stream*>, std::allocator<std::pair<libcamera::Stream* const, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > > > >::_M_get_insert_unique_pos(libcamera::Stream* const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<libcamera::V4L2PixelFormat, std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat>, std::_Select1st<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> >, std::less<libcamera::V4L2PixelFormat>, std::allocator<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> >, libcamera::V4L2PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::V4L2PixelFormat, std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat>, std::_Select1st<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> >, std::less<libcamera::V4L2PixelFormat>, std::allocator<std::pair<libcamera::V4L2PixelFormat const, libcamera::PixelFormat> > >::_M_get_insert_unique_pos(libcamera::V4L2PixelFormat const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<libcamera::V4L2PixelFormat, std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::V4L2PixelFormat>, std::allocator<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_erase(std::_Rb_tree_node<std::pair<libcamera::V4L2PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >*)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<long const, long> >, long const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree<long, std::pair<long const, long>, std::_Select1st<std::pair<long const, long> >, std::less<long>, std::allocator<std::pair<long const, long> > >::_M_get_insert_unique_pos(long const&)@Base" 0~git20200513+924778e
 (c++)"std::_Rb_tree_node<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >* std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_copy<std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_Reuse_or_alloc_node>(std::_Rb_tree_node<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > const*, std::_Rb_tree_node_base*, std::_Rb_tree<libcamera::PixelFormat, std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_Reuse_or_alloc_node&)@Base" 0~git20200629+e7aa92a
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap const&>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap const&> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, libcamera::ControlInfoMap const&> >*)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::ControlInfoMap> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::ControlInfoMap>, std::_Select1st<std::pair<unsigned int const, libcamera::ControlInfoMap> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::FrameBuffer*>, std::_Select1st<std::pair<unsigned int const, libcamera::FrameBuffer*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::FrameBuffer*> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::FrameBuffer*>, std::_Select1st<std::pair<unsigned int const, libcamera::FrameBuffer*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer*> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_erase(std::_Rb_tree_node<std::pair<unsigned int const, libcamera::IPAStream> >*)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::IPAStream> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::IPAStream>, std::_Select1st<std::pair<unsigned int const, libcamera::IPAStream> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::MediaObject*>, std::_Select1st<std::pair<unsigned int const, libcamera::MediaObject*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::MediaObject*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::MediaObject*> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::MediaObject*>, std::_Select1st<std::pair<unsigned int const, libcamera::MediaObject*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::MediaObject*> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::PixelFormat>, std::_Select1st<std::pair<unsigned int const, libcamera::PixelFormat> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::PixelFormat> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::PixelFormat> >, unsigned int const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::PixelFormat>, std::_Select1st<std::pair<unsigned int const, libcamera::PixelFormat> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::PixelFormat> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::RkISP1FrameInfo*>, std::_Select1st<std::pair<unsigned int const, libcamera::RkISP1FrameInfo*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::RkISP1FrameInfo*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, libcamera::RkISP1FrameInfo*> >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, libcamera::RkISP1FrameInfo*>, std::_Select1st<std::pair<unsigned int const, libcamera::RkISP1FrameInfo*> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::RkISP1FrameInfo*> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > >, std::_Select1st<std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > > >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > >, std::_Select1st<std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::pair<int, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > > > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, std::_Select1st<std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, v4l2_query_ext_ctrl>, std::_Select1st<std::pair<unsigned int const, v4l2_query_ext_ctrl> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, v4l2_query_ext_ctrl> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned int const, v4l2_query_ext_ctrl> >, unsigned int const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<unsigned int, std::pair<unsigned int const, v4l2_query_ext_ctrl>, std::_Select1st<std::pair<unsigned int const, v4l2_query_ext_ctrl> >, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, v4l2_query_ext_ctrl> > >::_M_get_insert_unique_pos(unsigned int const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*>, std::_Select1st<std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*> > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*> >, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*>, std::_Select1st<std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, libcamera::DeviceEnumeratorUdev::MediaDeviceDeps*> > >::_M_get_insert_unique_pos(unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > >, std::_Select1st<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > >, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > >, std::_Select1st<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > > >::_M_get_insert_unique_pos(unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> > > >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> > >, unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Rb_tree<unsigned long, std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> >, std::_Select1st<std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> > >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::weak_ptr<libcamera::Camera> > > >::_M_get_insert_unique_pos(unsigned long const&)@Base" 0~git20200116+30f9624
 (c++)"std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, unsigned int&, libcamera::IPAOperationData const&>(libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>*&, std::_Sp_alloc_shared_tag<std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> > >, unsigned int&, libcamera::IPAOperationData const&)@Base" 0~git20200116+30f9624
 (c++)"std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<libcamera::MediaDevice, std::default_delete<libcamera::MediaDevice> >(std::unique_ptr<libcamera::MediaDevice, std::default_delete<libcamera::MediaDevice> >&&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_weak_release()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_deleter()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr<decltype(nullptr), (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200417+35269f0
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr_inplace()@Base" 0~git20200513+924778e
 (c++)"std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>::_M_destroy()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>::_M_dispose()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>::_M_get_deleter(std::type_info const&)@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>::~_Sp_counted_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::_Sp_make_shared_tag::_S_ti()::__tag@Base" 0~git20200116+30f9624
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (libcamera::Thread::*)(), libcamera::Thread*> > >::_M_run()@Base" 0~git20200116+30f9624
 (c++)"std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (libcamera::Thread::*)(), libcamera::Thread*> > >::~_State_impl()@Base" 0~git20200116+30f9624
 (c++)"std::__throw_bad_weak_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::__throw_regex_error(std::regex_constants::error_type, char const*)@Base" 0~git20200513+924778e
 (c++)"std::unique_lock<std::mutex>::unlock()@Base" 0~git20200116+30f9624
 (c++)"std::unique_ptr<libcamera::FrameAction, std::default_delete<libcamera::FrameAction> >::~unique_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >::~unique_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::unique_ptr<libcamera::UVCCameraData, std::default_delete<libcamera::UVCCameraData> >::~unique_ptr()@Base" 0~git20200116+30f9624
 (c++)"std::unordered_map<unsigned int, libcamera::ControlId const*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > >::~unordered_map()@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<char, std::allocator<char> >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<libcamera::FrameMetadata::Plane, std::allocator<libcamera::FrameMetadata::Plane> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<libcamera::V4L2BufferCache::Entry::Plane, std::allocator<libcamera::V4L2BufferCache::Entry::Plane> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::_Vector_base<libcamera::V4L2PixelFormat, std::allocator<libcamera::V4L2PixelFormat> >::~_Vector_base()@Base" 0~git20200417+35269f0
 (c++)"std::_Vector_base<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<std::pair<char, char>, std::allocator<std::pair<char, char> > >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int>, std::allocator<std::pair<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, int> > >::~_Vector_base()@Base" 0~git20200513+924778e
 (c++)"std::_Vector_base<unsigned int, std::allocator<unsigned int> >::~_Vector_base()@Base" 0~git20200116+30f9624
 (c++)"std::vector<char, std::allocator<char> >::_M_erase(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, __gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >)@Base" 0~git20200513+924778e
 (c++)"std::vector<int, std::allocator<int> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::IPAProxyFactory*, std::allocator<libcamera::IPAProxyFactory*> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::PipelineHandlerFactory*, std::allocator<libcamera::PipelineHandlerFactory*> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >::operator=(std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > const&)@Base" 0~git20200417+35269f0
 (c++)"std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::StreamConfiguration, std::allocator<libcamera::StreamConfiguration> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::V4L2BufferCache::Entry, std::allocator<libcamera::V4L2BufferCache::Entry> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<libcamera::V4L2BufferCache::Entry, std::allocator<libcamera::V4L2BufferCache::Entry> >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >::_M_fill_assign(unsigned long, std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)@Base" 0~git20200513+924778e
 (c++)"std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >::~vector()@Base" 0~git20200513+924778e
 (c++)"std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::~vector()@Base" 0~git20200513+924778e
 (c++)"std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::vector(std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > const&)@Base" 0~git20200513+924778e
 (c++)"std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >::~vector()@Base" 0~git20200116+30f9624
 (c++)"std::vector<std::weak_ptr<libcamera::Camera>, std::allocator<std::weak_ptr<libcamera::Camera> > >::~vector()@Base" 0~git20200629+e7aa92a
 (c++)"std::vector<std::weak_ptr<libcamera::Camera>, std::allocator<std::weak_ptr<libcamera::Camera> > >::~vector()@Base" 0~git20200629+e7aa92a
 (c++)"std::vector<unsigned char, std::allocator<unsigned char> >::_M_default_append(unsigned long)@Base" 0~git20200116+30f9624
 (c++)"std::vector<unsigned int, std::allocator<unsigned int> >::reserve(unsigned long)@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::BoundMethodArgs<int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<void>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<void*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::CameraControlValidator@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::CameraManager@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::CameraManager::Private@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::CameraSensor@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::ControlValidator@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::DeviceEnumerator@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::DeviceEnumeratorSysfs@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::DeviceEnumeratorUdev@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::EventDispatcher@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::EventDispatcherPoll@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::EventNotifier@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::FrameAction@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::InvokeMessage@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAContextWrapper@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAModule@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::IPAProxy@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAProxyFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAProxyLinux@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAProxyLinuxFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPAProxyThread@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::IPAProxyThreadFactory@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::IPAProxyThread::ThreadProxy@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::IPU3CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::IPU3CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Loggable@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::MediaDevice@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::MediaEntity@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::MediaLink@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::MediaObject@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::MediaPad@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Message@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Object@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandler@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerIPU3@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerIPU3Factory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerRkISP1@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerRkISP1Factory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerRPi@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::PipelineHandlerRPiFactory@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::PipelineHandlerUVC@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerUVCFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerVimc@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::PipelineHandlerVimcFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RkISP1ActionQueueBuffers@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RkISP1ActionSetSensor@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RkISP1CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RkISP1CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RkISP1Timeline@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::RPiCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::RPiCameraData@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::Signal<>::disconnect<libcamera::CameraManager::Private, void>(libcamera::CameraManager::Private*, void (libcamera::CameraManager::Private::*)())::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::Signal<libcamera::Camera*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::EventNotifier*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::FrameBuffer*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::Signal<libcamera::IPCUnixSocket*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::MediaDevice*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::MediaDevice*>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::Process*, libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::Thread*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<libcamera::Timer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo for libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo for libcamera::SimpleCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::SimpleCameraData@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::SimplePipelineHandler@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::SimplePipelineHandlerFactory@Base" 0~git20200513+924778e
 (c++)"typeinfo for libcamera::Thread@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::ThreadMain@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Timeline@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::Timer@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::UVCCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::UVCCameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::V4L2Device@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::V4L2Subdevice@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::V4L2VideoDevice@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::VimcCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo for libcamera::VimcCameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::enable_shared_from_this<libcamera::PipelineHandler>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo for std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (libcamera::Thread::*)(), libcamera::Thread*> > >@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<int>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, bool>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, unsigned int>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::CameraControlValidator@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::CameraManager@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::CameraManager::Private@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::CameraSensor@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::ControlValidator@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::DeviceEnumerator@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::DeviceEnumeratorSysfs@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::DeviceEnumeratorUdev@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::EventDispatcher@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::EventDispatcherPoll@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::EventNotifier@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::FrameAction@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::InvokeMessage@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAContextWrapper@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAModule@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::IPAProxy@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAProxyFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAProxyLinux@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAProxyLinuxFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPAProxyThread@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::IPAProxyThreadFactory@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::IPAProxyThread::ThreadProxy@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::IPU3CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::IPU3CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Loggable@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::MediaDevice@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::MediaEntity@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::MediaLink@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::MediaObject@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::MediaPad@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Message@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Object@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandler@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerIPU3@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerIPU3Factory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerRkISP1@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerRkISP1Factory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerRPi@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::PipelineHandlerRPiFactory@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::PipelineHandlerUVC@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerUVCFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerVimc@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::PipelineHandlerVimcFactory@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RkISP1ActionQueueBuffers@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RkISP1ActionSetSensor@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RkISP1CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RkISP1CameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RkISP1Timeline@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::RPiCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::RPiCameraData@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for libcamera::Signal<>::disconnect<libcamera::CameraManager::Private, void>(libcamera::CameraManager::Private*, void (libcamera::CameraManager::Private::*)())::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for libcamera::Signal<libcamera::Camera*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::EventNotifier*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::FrameBuffer*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::Signal<libcamera::IPCUnixSocket*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::MediaDevice*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::MediaDevice*>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::Process*, libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::Thread*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<libcamera::Timer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200629+e7aa92a
 (c++)"typeinfo name for libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::IPAOperationData const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for libcamera::SimpleCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::SimpleCameraData@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::SimplePipelineHandler@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::SimplePipelineHandlerFactory@Base" 0~git20200513+924778e
 (c++)"typeinfo name for libcamera::Thread@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::ThreadMain@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Timeline@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::Timer@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::UVCCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::UVCCameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::V4L2Device@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::V4L2Subdevice@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::V4L2VideoDevice@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::VimcCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for libcamera::VimcCameraData@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::default_delete<libcamera::MediaDevice>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, false, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_AnyMatcher<std::__cxx11::regex_traits<char>, true, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_BracketMatcher<std::__cxx11::regex_traits<char>, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, false, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, false>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::__detail::_CharMatcher<std::__cxx11::regex_traits<char>, true, true>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::enable_shared_from_this<libcamera::PipelineHandler>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Mutex_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"typeinfo name for std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::_Sp_make_shared_tag@Base" 0~git20200116+30f9624
 (c++)"typeinfo name for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (libcamera::Thread::*)(), libcamera::Thread*> > >@Base" 0~git20200116+30f9624
 (c++)"void std::deque<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> >::_M_push_back_aux<libcamera::FrameBuffer* const&>(libcamera::FrameBuffer* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::deque<libcamera::FrameBuffer*, std::allocator<libcamera::FrameBuffer*> >::_M_push_back_aux<libcamera::FrameBuffer*>(libcamera::FrameBuffer*&&)@Base" 0~git20200116+30f9624
 (c++)"void std::deque<long, std::allocator<long> >::_M_push_back_aux<long const&>(long const&)@Base" 0~git20200513+924778e
 (c++)"void std::deque<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > > >::emplace_back<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > >(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >&&)@Base" 0~git20200513+924778e
 (c++)"void std::deque<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > > >::_M_push_back_aux<std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&>(std::__detail::_StateSeq<std::__cxx11::regex_traits<char> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Destroy_aux<false>::__destroy<libcamera::ControlList*>(libcamera::ControlList*, libcamera::ControlList*)@Base" 0~git20200116+30f9624
 (c++)"void std::_Destroy_aux<false>::__destroy<libcamera::StreamConfiguration*>(libcamera::StreamConfiguration*, libcamera::StreamConfiguration*)@Base" 0~git20200116+30f9624
 (c++)"void std::_Destroy_aux<false>::__destroy<std::__detail::_State<char>*>(std::__detail::_State<char>*, std::__detail::_State<char>*)@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_bracket_matcher<false, false>(bool)@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_bracket_matcher<false, true>(bool)@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_bracket_matcher<true, false>(bool)@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_bracket_matcher<true, true>(bool)@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<false, false>()@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<false, true>()@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<true, false>()@Base" 0~git20200513+924778e
 (c++)"void std::__detail::_Compiler<std::__cxx11::regex_traits<char> >::_M_insert_character_class_matcher<true, true>()@Base" 0~git20200513+924778e
 (c++)"void std::__detail::__to_chars_10_impl<unsigned int>(char*, unsigned int, unsigned int)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > >(std::_Hashtable<libcamera::ControlId const*, std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::__detail::_Select1st, std::equal_to<libcamera::ControlId const*>, std::hash<libcamera::ControlId const*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo>, false> > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlId const*>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlId const*>, false> > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign_elements<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&>(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlValue>, false> > > >(std::_Hashtable<unsigned int, std::pair<unsigned int const, libcamera::ControlValue>, std::allocator<std::pair<unsigned int const, libcamera::ControlValue> >, std::__detail::_Select1st, std::equal_to<unsigned int>, std::hash<unsigned int>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::__detail::_ReuseOrAllocNode<std::allocator<std::__detail::_Hash_node<std::pair<unsigned int const, libcamera::ControlValue>, false> > > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::lock<std::unique_lock<std::mutex>, std::unique_lock<std::mutex>>(std::unique_lock<std::mutex>&, std::unique_lock<std::mutex>&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<char, std::allocator<char> >::emplace_back<char>(char&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<char, std::allocator<char> >::_M_realloc_insert<char>(__gnu_cxx::__normal_iterator<char*, std::vector<char, std::allocator<char> > >, char&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<int, std::allocator<int> >::_M_realloc_insert<int const&>(__gnu_cxx::__normal_iterator<int*, std::vector<int, std::allocator<int> > >, int const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> >::_M_realloc_insert<libcamera::ControlList>(__gnu_cxx::__normal_iterator<libcamera::ControlList*, std::vector<libcamera::ControlList, std::allocator<libcamera::ControlList> > >, libcamera::ControlList&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> >::_M_realloc_insert<libcamera::FrameBuffer::Plane>(__gnu_cxx::__normal_iterator<libcamera::FrameBuffer::Plane*, std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > >, libcamera::FrameBuffer::Plane&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::FrameMetadata::Plane, std::allocator<libcamera::FrameMetadata::Plane> >::_M_realloc_insert<libcamera::FrameMetadata::Plane>(__gnu_cxx::__normal_iterator<libcamera::FrameMetadata::Plane*, std::vector<libcamera::FrameMetadata::Plane, std::allocator<libcamera::FrameMetadata::Plane> > >, libcamera::FrameMetadata::Plane&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> >::_M_realloc_insert<libcamera::IPABuffer>(__gnu_cxx::__normal_iterator<libcamera::IPABuffer*, std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > >, libcamera::IPABuffer&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::IPAModule*, std::allocator<libcamera::IPAModule*> >::_M_realloc_insert<libcamera::IPAModule* const&>(__gnu_cxx::__normal_iterator<libcamera::IPAModule**, std::vector<libcamera::IPAModule*, std::allocator<libcamera::IPAModule*> > >, libcamera::IPAModule* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::IPAProxyFactory*, std::allocator<libcamera::IPAProxyFactory*> >::_M_realloc_insert<libcamera::IPAProxyFactory* const&>(__gnu_cxx::__normal_iterator<libcamera::IPAProxyFactory**, std::vector<libcamera::IPAProxyFactory*, std::allocator<libcamera::IPAProxyFactory*> > >, libcamera::IPAProxyFactory* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> >::_M_realloc_insert<libcamera::MediaEntity* const&>(__gnu_cxx::__normal_iterator<libcamera::MediaEntity**, std::vector<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > >, libcamera::MediaEntity* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::MediaLink*, std::allocator<libcamera::MediaLink*> >::_M_realloc_insert<libcamera::MediaLink* const&>(__gnu_cxx::__normal_iterator<libcamera::MediaLink**, std::vector<libcamera::MediaLink*, std::allocator<libcamera::MediaLink*> > >, libcamera::MediaLink* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::MediaPad*, std::allocator<libcamera::MediaPad*> >::_M_realloc_insert<libcamera::MediaPad* const&>(__gnu_cxx::__normal_iterator<libcamera::MediaPad**, std::vector<libcamera::MediaPad*, std::allocator<libcamera::MediaPad*> > >, libcamera::MediaPad* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::Object*, std::allocator<libcamera::Object*> >::_M_realloc_insert<libcamera::Object*>(__gnu_cxx::__normal_iterator<libcamera::Object**, std::vector<libcamera::Object*, std::allocator<libcamera::Object*> > >, libcamera::Object*&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::PipelineHandlerFactory*, std::allocator<libcamera::PipelineHandlerFactory*> >::_M_realloc_insert<libcamera::PipelineHandlerFactory* const&>(__gnu_cxx::__normal_iterator<libcamera::PipelineHandlerFactory**, std::vector<libcamera::PipelineHandlerFactory*, std::allocator<libcamera::PipelineHandlerFactory*> > >, libcamera::PipelineHandlerFactory* const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::PixelFormat, std::allocator<libcamera::PixelFormat> >::_M_realloc_insert<libcamera::PixelFormat const&>(__gnu_cxx::__normal_iterator<libcamera::PixelFormat*, std::vector<libcamera::PixelFormat, std::allocator<libcamera::PixelFormat> > >, libcamera::PixelFormat const&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<libcamera::RPiStream*, std::allocator<libcamera::RPiStream*> >::_M_realloc_insert<libcamera::RPiStream*>(__gnu_cxx::__normal_iterator<libcamera::RPiStream**, std::vector<libcamera::RPiStream*, std::allocator<libcamera::RPiStream*> > >, libcamera::RPiStream*&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >::_M_realloc_insert<libcamera::Size>(__gnu_cxx::__normal_iterator<libcamera::SizeRange*, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, libcamera::Size&&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >::_M_realloc_insert<libcamera::Size, libcamera::Size>(__gnu_cxx::__normal_iterator<libcamera::SizeRange*, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > >, libcamera::Size&&, libcamera::Size&&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<libcamera::Size, std::allocator<libcamera::Size> >::_M_realloc_insert<libcamera::Size const&>(__gnu_cxx::__normal_iterator<libcamera::Size*, std::vector<libcamera::Size, std::allocator<libcamera::Size> > >, libcamera::Size const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::Size, std::allocator<libcamera::Size> >::_M_realloc_insert<libcamera::Size>(__gnu_cxx::__normal_iterator<libcamera::Size*, std::vector<libcamera::Size, std::allocator<libcamera::Size> > >, libcamera::Size&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::StreamConfiguration, std::allocator<libcamera::StreamConfiguration> >::_M_realloc_insert<libcamera::StreamConfiguration const&>(__gnu_cxx::__normal_iterator<libcamera::StreamConfiguration*, std::vector<libcamera::StreamConfiguration, std::allocator<libcamera::StreamConfiguration> > >, libcamera::StreamConfiguration const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::Stream const*, std::allocator<libcamera::Stream const*> >::_M_realloc_insert<libcamera::Stream const* const&>(__gnu_cxx::__normal_iterator<libcamera::Stream const**, std::vector<libcamera::Stream const*, std::allocator<libcamera::Stream const*> > >, libcamera::Stream const* const&)@Base" 0~git20200629+e7aa92a
 (c++)"void std::vector<libcamera::V4L2BufferCache::Entry::Plane, std::allocator<libcamera::V4L2BufferCache::Entry::Plane> >::_M_realloc_insert<libcamera::FrameBuffer::Plane const&>(__gnu_cxx::__normal_iterator<libcamera::V4L2BufferCache::Entry::Plane*, std::vector<libcamera::V4L2BufferCache::Entry::Plane, std::allocator<libcamera::V4L2BufferCache::Entry::Plane> > >, libcamera::FrameBuffer::Plane const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<libcamera::V4L2BufferCache::Entry, std::allocator<libcamera::V4L2BufferCache::Entry> >::_M_realloc_insert<bool, unsigned long, std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&>(__gnu_cxx::__normal_iterator<libcamera::V4L2BufferCache::Entry*, std::vector<libcamera::V4L2BufferCache::Entry, std::allocator<libcamera::V4L2BufferCache::Entry> > >, bool&&, unsigned long&&, std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<libcamera::V4L2PixelFormat, std::allocator<libcamera::V4L2PixelFormat> >::_M_realloc_insert<libcamera::V4L2PixelFormat>(__gnu_cxx::__normal_iterator<libcamera::V4L2PixelFormat*, std::vector<libcamera::V4L2PixelFormat, std::allocator<libcamera::V4L2PixelFormat> > >, libcamera::V4L2PixelFormat&&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<pollfd, std::allocator<pollfd> >::_M_realloc_insert<pollfd>(__gnu_cxx::__normal_iterator<pollfd*, std::vector<pollfd, std::allocator<pollfd> > >, pollfd&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&>(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_realloc_insert<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::__cxx11::regex_traits<char>::_RegexMask, std::allocator<std::__cxx11::regex_traits<char>::_RegexMask> >::_M_realloc_insert<std::__cxx11::regex_traits<char>::_RegexMask const&>(__gnu_cxx::__normal_iterator<std::__cxx11::regex_traits<char>::_RegexMask*, std::vector<std::__cxx11::regex_traits<char>::_RegexMask, std::allocator<std::__cxx11::regex_traits<char>::_RegexMask> > >, std::__cxx11::regex_traits<char>::_RegexMask const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::__detail::_State<char>, std::allocator<std::__detail::_State<char> > >::_M_realloc_insert<std::__detail::_State<char> >(__gnu_cxx::__normal_iterator<std::__detail::_State<char>*, std::vector<std::__detail::_State<char>, std::allocator<std::__detail::_State<char> > > >, std::__detail::_State<char>&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::pair<char, char>, std::allocator<std::pair<char, char> > >::_M_realloc_insert<std::pair<char, char> >(__gnu_cxx::__normal_iterator<std::pair<char, char>*, std::vector<std::pair<char, char>, std::allocator<std::pair<char, char> > > >, std::pair<char, char>&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > >::_M_realloc_insert<long&, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&>(__gnu_cxx::__normal_iterator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >*, std::vector<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > >, std::allocator<std::pair<long, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > > > > >, long&, std::vector<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >, std::allocator<std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > > const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::emplace_back<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > >::_M_realloc_insert<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >(__gnu_cxx::__normal_iterator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >*, std::vector<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > > >, std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::shared_ptr<libcamera::Camera>, std::allocator<std::shared_ptr<libcamera::Camera> > >::_M_realloc_insert<std::shared_ptr<libcamera::Camera> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libcamera::Camera>*, std::vector<std::shared_ptr<libcamera::Camera>, std::allocator<std::shared_ptr<libcamera::Camera> > > >, std::shared_ptr<libcamera::Camera>&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::shared_ptr<libcamera::MediaDevice>, std::allocator<std::shared_ptr<libcamera::MediaDevice> > >::_M_realloc_insert<std::shared_ptr<libcamera::MediaDevice> const&>(__gnu_cxx::__normal_iterator<std::shared_ptr<libcamera::MediaDevice>*, std::vector<std::shared_ptr<libcamera::MediaDevice>, std::allocator<std::shared_ptr<libcamera::MediaDevice> > > >, std::shared_ptr<libcamera::MediaDevice> const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::shared_ptr<libcamera::MediaDevice>, std::allocator<std::shared_ptr<libcamera::MediaDevice> > >::_M_realloc_insert<std::shared_ptr<libcamera::MediaDevice> >(__gnu_cxx::__normal_iterator<std::shared_ptr<libcamera::MediaDevice>*, std::vector<std::shared_ptr<libcamera::MediaDevice>, std::allocator<std::shared_ptr<libcamera::MediaDevice> > > >, std::shared_ptr<libcamera::MediaDevice>&&)@Base" 0~git20200417+35269f0
 (c++)"void std::vector<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >, std::allocator<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> > > >::_M_realloc_insert<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >*, std::vector<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >, std::allocator<std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> > > > >, std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> >, std::allocator<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> > > >::_M_realloc_insert<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> > >(__gnu_cxx::__normal_iterator<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> >*, std::vector<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> >, std::allocator<std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> > > > >, std::unique_ptr<libcamera::SimpleCameraData, std::default_delete<libcamera::SimpleCameraData> >&&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<std::weak_ptr<libcamera::Camera>, std::allocator<std::weak_ptr<libcamera::Camera> > >::_M_realloc_insert<std::weak_ptr<libcamera::Camera> >(__gnu_cxx::__normal_iterator<std::weak_ptr<libcamera::Camera>*, std::vector<std::weak_ptr<libcamera::Camera>, std::allocator<std::weak_ptr<libcamera::Camera> > > >, std::weak_ptr<libcamera::Camera>&&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int const&>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int const&)@Base" 0~git20200116+30f9624
 (c++)"void std::vector<unsigned int, std::allocator<unsigned int> >::_M_realloc_insert<unsigned int>(__gnu_cxx::__normal_iterator<unsigned int*, std::vector<unsigned int, std::allocator<unsigned int> > >, unsigned int&&)@Base" 0~git20200629+e7aa92a
 (c++)"void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long const&>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long const&)@Base" 0~git20200513+924778e
 (c++)"void std::vector<unsigned long, std::allocator<unsigned long> >::_M_realloc_insert<unsigned long>(__gnu_cxx::__normal_iterator<unsigned long*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long&&)@Base" 0~git20200629+e7aa92a
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::CameraManager::Private, void>@Base" 0~git20200629+e7aa92a
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::CIO2Device, void, libcamera::FrameBuffer*>@Base" 0~git20200629+e7aa92a
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::DeviceEnumeratorUdev, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAContextWrapper, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAProxyLinux, void, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, int>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAProxyThread::ThreadProxy, void, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPAProxyThread, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPCUnixSocket, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::IPU3CameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandlerRkISP1, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::PipelineHandler, void, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::ProcessManager, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::RkISP1CameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::RPiCameraData, void, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::SimpleConverter, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::SimplePipelineHandler, void, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::Timeline, void, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::UVCCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::V4L2VideoDevice, void, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::VimcCameraData, void, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<int>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<int, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<void*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, bool>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::Camera*>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, libcamera::Timer*>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::BoundMethodPack<void*, unsigned int>@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::CameraControlValidator@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::CameraData@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::CameraManager@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::CameraManager::Private@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::CameraSensor@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::DeviceEnumerator@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::DeviceEnumeratorSysfs@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::DeviceEnumeratorUdev@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::EventDispatcher@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::EventDispatcherPoll@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::EventNotifier@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::InvokeMessage@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAContextWrapper@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAInterface@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAModule@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::IPAProxy@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAProxyFactory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAProxyLinux@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAProxyLinuxFactory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPAProxyThread@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::IPAProxyThreadFactory@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::IPAProxyThread::ThreadProxy@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::IPU3CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::IPU3CameraData@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::Loggable@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::MediaDevice@Base" 0~git20200417+35269f0
 (c++)"vtable for libcamera::MediaEntity@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::MediaLink@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::MediaPad@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::Message@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::Object@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandler@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerFactory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerIPU3@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerIPU3Factory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerRkISP1@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerRkISP1Factory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerRPi@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::PipelineHandlerRPiFactory@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::PipelineHandlerUVC@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerUVCFactory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerVimc@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::PipelineHandlerVimcFactory@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RkISP1ActionQueueBuffers@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RkISP1ActionSetSensor@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RkISP1CameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RkISP1CameraData@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RkISP1Timeline@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::RPiCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::RPiCameraData@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::SimpleCameraConfiguration@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::SimpleCameraData@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::SimplePipelineHandler@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::SimplePipelineHandlerFactory@Base" 0~git20200513+924778e
 (c++)"vtable for libcamera::Thread@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::ThreadMain@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::Timeline@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::Timer@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::UVCCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::UVCCameraData@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::V4L2Device@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::V4L2Subdevice@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::V4L2VideoDevice@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::VimcCameraConfiguration@Base" 0~git20200116+30f9624
 (c++)"vtable for libcamera::VimcCameraData@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_deleter<libcamera::MediaDevice*, std::default_delete<libcamera::MediaDevice>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::CameraConfiguration*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Request*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<int, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<int>, std::allocator<libcamera::BoundMethodPack<int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, bool>, std::allocator<libcamera::BoundMethodPack<void*, bool> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Camera*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Camera*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::EventNotifier*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::FrameBuffer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200417+35269f0
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::IPCUnixSocket*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::MediaDevice*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, libcamera::Timer*>, std::allocator<libcamera::BoundMethodPack<void*, libcamera::Timer*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*>, std::allocator<libcamera::BoundMethodPack<void*> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int, libcamera::IPAOperationData const&> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::BoundMethodPack<void*, unsigned int>, std::allocator<libcamera::BoundMethodPack<void*, unsigned int> >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::FileDescriptor::Descriptor, std::allocator<libcamera::FileDescriptor::Descriptor>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<libcamera::LogOutput, std::allocator<libcamera::LogOutput>, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::_Sp_counted_ptr_inplace<std::__detail::_NFA<std::__cxx11::regex_traits<char> >, std::allocator<std::__detail::_NFA<std::__cxx11::regex_traits<char> > >, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200513+924778e
 (c++)"vtable for std::_Sp_counted_ptr<libcamera::PipelineHandler*, (__gnu_cxx::_Lock_policy)2>@Base" 0~git20200116+30f9624
 (c++)"vtable for std::thread::_State_impl<std::thread::_Invoker<std::tuple<void (libcamera::Thread::*)(), libcamera::Thread*> > >@Base" 0~git20200116+30f9624
