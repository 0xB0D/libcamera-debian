libcamera-base.so.0.0.1 libcamera0 #MINVER#
 (c++)"libcamera::Backtrace::Backtrace()@Base" 0.0.1
 (c++)"libcamera::Backtrace::backtraceTrace()@Base" 0.0.1
 (c++)"libcamera::Backtrace::toString[abi:cxx11](unsigned int) const@Base" 0.0.1
 (c++)"libcamera::Backtrace::unwindTrace()@Base" 0.0.1
 (c++)"libcamera::BoundMethodArgs<void, bool>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0.0.1
 (c++)"libcamera::BoundMethodArgs<void>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0.0.1
 (c++)"libcamera::BoundMethodBase::activatePack(std::shared_ptr<libcamera::BoundMethodPackBase>, bool)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::activate(bool, bool)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::~BoundMethodMember()@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>::invoke(bool)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::activate(bool)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::~BoundMethodMember()@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<libcamera::Timer, void>::invoke()@Base" 0.0.1
 (c++)"libcamera::BoundMethodPack<void, bool>::~BoundMethodPack()@Base" 0.0.1
 (c++)"libcamera::BoundMethodPack<void>::~BoundMethodPack()@Base" 0.0.1
 (c++)"libcamera::EventDispatcher::~EventDispatcher()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::~EventDispatcherPoll()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::EventDispatcherPoll()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::EventNotifierSetPoll::events() const@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::interrupt()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::poll(std::vector<pollfd, std::allocator<pollfd> >*)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::processEvents()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::processInterrupt(pollfd const&)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::processNotifiers(std::vector<pollfd, std::allocator<pollfd> > const&)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::processTimers()@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::registerEventNotifier(libcamera::EventNotifier*)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::registerTimer(libcamera::Timer*)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::unregisterEventNotifier(libcamera::EventNotifier*)@Base" 0.0.1
 (c++)"libcamera::EventDispatcherPoll::unregisterTimer(libcamera::Timer*)@Base" 0.0.1
 (c++)"libcamera::EventNotifier::~EventNotifier()@Base" 0.0.1
 (c++)"libcamera::EventNotifier::EventNotifier(int, libcamera::EventNotifier::Type, libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::EventNotifier::message(libcamera::Message*)@Base" 0.0.1
 (c++)"libcamera::EventNotifier::setEnabled(bool)@Base" 0.0.1
 (c++)"libcamera::Extensible::Extensible(std::unique_ptr<libcamera::Extensible::Private, std::default_delete<libcamera::Extensible::Private> >)@Base" 0.0.1
 (c++)"libcamera::Extensible::Private::~Private()@Base" 0.0.1
 (c++)"libcamera::Extensible::Private::Private()@Base" 0.0.1
 (c++)"libcamera::File::close()@Base" 0.0.1
 (c++)"libcamera::File::exists() const@Base" 0.0.1
 (c++)"libcamera::File::exists(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::File::~File()@Base" 0.0.1
 (c++)"libcamera::File::File()@Base" 0.0.1
 (c++)"libcamera::File::File(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::File::map(long, long, libcamera::Flags<libcamera::File::MapFlag>)@Base" 0.0.1
 (c++)"libcamera::File::open(libcamera::Flags<libcamera::File::OpenModeFlag>)@Base" 0.0.1
 (c++)"libcamera::File::pos() const@Base" 0.0.1
 (c++)"libcamera::File::read(libcamera::Span<unsigned char, 18446744073709551615ul> const&)@Base" 0.0.1
 (c++)"libcamera::File::seek(long)@Base" 0.0.1
 (c++)"libcamera::File::setFileName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::File::size() const@Base" 0.0.1
 (c++)"libcamera::File::unmapAll()@Base" 0.0.1
 (c++)"libcamera::File::unmap(unsigned char*)@Base" 0.0.1
 (c++)"libcamera::File::write(libcamera::Span<unsigned char const, 18446744073709551615ul> const&)@Base" 0.0.1
 (c++)"libcamera::InvokeMessage::invoke()@Base" 0.0.1
 (c++)"libcamera::InvokeMessage::~InvokeMessage()@Base" 0.0.1
 (c++)"libcamera::InvokeMessage::InvokeMessage(libcamera::BoundMethodBase*, std::shared_ptr<libcamera::BoundMethodPackBase>, libcamera::Semaphore*, bool)@Base" 0.0.1
 (c++)"libcamera::LogCategory::defaultCategory()@Base" 0.0.1
 (c++)"libcamera::logCategoryEvent()@Base" 0.0.1
 (c++)"libcamera::logCategoryFile()@Base" 0.0.1
 (c++)"libcamera::LogCategory::LogCategory(char const*)@Base" 0.0.1
 (c++)"libcamera::logCategoryMessage()@Base" 0.0.1
 (c++)"libcamera::logCategoryObject()@Base" 0.0.1
 (c++)"libcamera::LogCategory::setSeverity(libcamera::LogSeverity)@Base" 0.0.1
 (c++)"libcamera::logCategorySharedFD()@Base" 0.0.1
 (c++)"libcamera::logCategoryThread()@Base" 0.0.1
 (c++)"libcamera::logCategoryTimer()@Base" 0.0.1
 (c++)"libcamera::logCategoryUniqueFD()@Base" 0.0.1
 (c++)"libcamera::Loggable::~Loggable()@Base" 0.0.1
 (c++)"libcamera::Loggable::_log(libcamera::LogCategory const*, libcamera::LogSeverity, char const*, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::Logger::backtrace()@Base" 0.0.1
 (c++)"libcamera::Logger::destroyed_@Base" 0.0.1
 (c++)"libcamera::Logger::instance()@Base" 0.0.1
 (c++)"libcamera::Logger::~Logger()@Base" 0.0.1
 (c++)"libcamera::Logger::Logger()@Base" 0.0.1
 (c++)"libcamera::Logger::logSetFile(char const*, bool)@Base" 0.0.1
 (c++)"libcamera::Logger::logSetLevel(char const*, char const*)@Base" 0.0.1
 (c++)"libcamera::Logger::logSetStream(std::basic_ostream<char, std::char_traits<char> >*, bool)@Base" 0.0.1
 (c++)"libcamera::Logger::logSetTarget(libcamera::LoggingTarget)@Base" 0.0.1
 (c++)"libcamera::Logger::parseLogFile()@Base" 0.0.1
 (c++)"libcamera::Logger::parseLogLevels()@Base" 0.0.1
 (c++)"libcamera::Logger::parseLogLevel(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::Logger::registerCategory(libcamera::LogCategory*)@Base" 0.0.1
 (c++)"libcamera::Logger::write(libcamera::LogMessage const&)@Base" 0.0.1
 (c++)"libcamera::_log(libcamera::LogCategory const*, libcamera::LogSeverity, char const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::LogMessage::init(char const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::LogMessage::~LogMessage()@Base" 0.0.1
 (c++)"libcamera::LogMessage::LogMessage(char const*, unsigned int, libcamera::LogCategory const&, libcamera::LogSeverity, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::LogMessage::LogMessage(libcamera::LogMessage&&)@Base" 0.0.1
 (c++)"libcamera::LogOutput::isValid() const@Base" 0.0.1
 (c++)"libcamera::LogOutput::~LogOutput()@Base" 0.0.1
 (c++)"libcamera::LogOutput::LogOutput()@Base" 0.0.1
 (c++)"libcamera::LogOutput::LogOutput(char const*, bool)@Base" 0.0.1
 (c++)"libcamera::LogOutput::LogOutput(std::basic_ostream<char, std::char_traits<char> >*, bool)@Base" 0.0.1
 (c++)"libcamera::LogOutput::write(libcamera::LogMessage const&)@Base" 0.0.1
 (c++)"libcamera::LogOutput::write(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::LogOutput::writeStream(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::LogOutput::writeSyslog(libcamera::LogSeverity, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::logSetFile(char const*, bool)@Base" 0.0.1
 (c++)"libcamera::logSetLevel(char const*, char const*)@Base" 0.0.1
 (c++)"libcamera::logSetStream(std::basic_ostream<char, std::char_traits<char> >*, bool)@Base" 0.0.1
 (c++)"libcamera::logSetTarget(libcamera::LoggingTarget)@Base" 0.0.1
 (c++)"libcamera::Message::~Message()@Base" 0.0.1
 (c++)"libcamera::Message::Message(libcamera::Message::Type)@Base" 0.0.1
 (c++)"libcamera::Message::nextUserType_@Base" 0.0.1
 (c++)"libcamera::Message::registerMessageType()@Base" 0.0.1
 (c++)"libcamera::Object::connect(libcamera::SignalBase*)@Base" 0.0.1
 (c++)"libcamera::Object::deleteLater()@Base" 0.0.1
 (c++)"libcamera::Object::disconnect(libcamera::SignalBase*)@Base" 0.0.1
 (c++)"libcamera::Object::message(libcamera::Message*)@Base" 0.0.1
 (c++)"libcamera::Object::moveToThread(libcamera::Thread*)@Base" 0.0.1
 (c++)"libcamera::Object::notifyThreadMove()@Base" 0.0.1
 (c++)"libcamera::Object::~Object()@Base" 0.0.1
 (c++)"libcamera::Object::Object(libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::Object::postMessage(std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >)@Base" 0.0.1
 (c++)"libcamera::Semaphore::acquire(unsigned int)@Base" 0.0.1
 (c++)"libcamera::Semaphore::available()@Base" 0.0.1
 (c++)"libcamera::Semaphore::release(unsigned int)@Base" 0.0.1
 (c++)"libcamera::Semaphore::Semaphore(unsigned int)@Base" 0.0.1
 (c++)"libcamera::Semaphore::tryAcquire(unsigned int)@Base" 0.0.1
 (c++)"libcamera::SharedFD::Descriptor::~Descriptor()@Base" 0.0.1
 (c++)"libcamera::SharedFD::Descriptor::Descriptor(int, bool)@Base" 0.0.1
 (c++)"libcamera::SharedFD::dup() const@Base" 0.0.1
 (c++)"libcamera::SharedFD::operator=(libcamera::SharedFD&&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::operator=(libcamera::SharedFD const&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::~SharedFD()@Base" 0.0.1
 (c++)"libcamera::SharedFD::SharedFD(int&&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::SharedFD(int const&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::SharedFD(libcamera::SharedFD&&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::SharedFD(libcamera::SharedFD const&)@Base" 0.0.1
 (c++)"libcamera::SharedFD::SharedFD(libcamera::UniqueFD)@Base" 0.0.1
 (c++)"libcamera::SignalBase::connect(libcamera::BoundMethodBase*)@Base" 0.0.1
 (c++)"libcamera::SignalBase::disconnect(libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::SignalBase::disconnect(std::function<bool (std::_List_iterator<libcamera::BoundMethodBase*>&)>)@Base" 0.0.1
 (c++)"libcamera::SignalBase::slots[abi:cxx11]()@Base" 0.0.1
 (c++)"libcamera::Thread::current()@Base" 0.0.1
 (c++)"libcamera::Thread::currentId()@Base" 0.0.1
 (c++)"libcamera::ThreadData::current()@Base" 0.0.1
 (c++)"libcamera::Thread::dispatchMessages(libcamera::Message::Type)@Base" 0.0.1
 (c++)"libcamera::Thread::eventDispatcher()@Base" 0.0.1
 (c++)"libcamera::Thread::exec()@Base" 0.0.1
 (c++)"libcamera::Thread::exit(int)@Base" 0.0.1
 (c++)"libcamera::Thread::finishThread()@Base" 0.0.1
 (c++)"libcamera::Thread::isRunning()@Base" 0.0.1
 (c++)"libcamera::ThreadMain::run()@Base" 0.0.1
 (c++)"libcamera::ThreadMain::~ThreadMain()@Base" 0.0.1
 (c++)"libcamera::Thread::moveObject(libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::Thread::moveObject(libcamera::Object*, libcamera::ThreadData*, libcamera::ThreadData*)@Base" 0.0.1
 (c++)"libcamera::Thread::postMessage(std::unique_ptr<libcamera::Message, std::default_delete<libcamera::Message> >, libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::Thread::removeMessages(libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::Thread::run()@Base" 0.0.1
 (c++)"libcamera::Thread::start()@Base" 0.0.1
 (c++)"libcamera::Thread::startThread()@Base" 0.0.1
 (c++)"libcamera::Thread::~Thread()@Base" 0.0.1
 (c++)"libcamera::Thread::Thread()@Base" 0.0.1
 (c++)"libcamera::Thread::wait(std::chrono::duration<long, std::ratio<1l, 1000000000l> >)@Base" 0.0.1
 (c++)"libcamera::Timer::isRunning() const@Base" 0.0.1
 (c++)"libcamera::Timer::message(libcamera::Message*)@Base" 0.0.1
 (c++)"libcamera::Timer::registerTimer()@Base" 0.0.1
 (c++)"libcamera::Timer::start(std::chrono::duration<long, std::ratio<1l, 1000l> >)@Base" 0.0.1
 (c++)"libcamera::Timer::start(std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > >)@Base" 0.0.1
 (c++)"libcamera::Timer::stop()@Base" 0.0.1
 (c++)"libcamera::Timer::~Timer()@Base" 0.0.1
 (c++)"libcamera::Timer::Timer(libcamera::Object*)@Base" 0.0.1
 (c++)"libcamera::Timer::unregisterTimer()@Base" 0.0.1
 (c++)"libcamera::UniqueFD::reset(int)@Base" 0.0.1
 (c++)"libcamera::utils::basename(char const*)@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::begin() const@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::end() const@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::iterator::iterator(libcamera::utils::details::StringSplitter const*, unsigned long)@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator*[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator++()@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::iterator::operator!=(libcamera::utils::details::StringSplitter::iterator const&) const@Base" 0.0.1
 (c++)"libcamera::utils::details::StringSplitter::StringSplitter(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::utils::dirname(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::utils::duration_to_timespec(std::chrono::duration<long, std::ratio<1l, 1000000000l> > const&)@Base" 0.0.1
 (c++)"libcamera::utils::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::utils::_hex const&)@Base" 0.0.1
 (c++)"libcamera::utils::secure_getenv(char const*)@Base" 0.0.1
 (c++)"libcamera::utils::split(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::utils::strlcpy(char*, char const*, unsigned long)@Base" 0.0.1
 (c++)"libcamera::utils::time_point_to_string[abi:cxx11](std::chrono::time_point<std::chrono::_V2::steady_clock, std::chrono::duration<long, std::ratio<1l, 1000000000l> > > const&)@Base" 0.0.1
 (c++)"libcamera::utils::toAscii(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++|regex|optional)"^std::.*@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodArgs<void>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, bool>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodPack<void>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodPack<void, bool>@Base" 0.0.1
 (c++)"typeinfo for libcamera::EventDispatcher@Base" 0.0.1
 (c++)"typeinfo for libcamera::EventDispatcherPoll@Base" 0.0.1
 (c++)"typeinfo for libcamera::EventNotifier@Base" 0.0.1
 (c++)"typeinfo for libcamera::Extensible::Private@Base" 0.0.1
 (c++)"typeinfo for libcamera::InvokeMessage@Base" 0.0.1
 (c++)"typeinfo for libcamera::Loggable@Base" 0.0.1
 (c++)"typeinfo for libcamera::Message@Base" 0.0.1
 (c++)"typeinfo for libcamera::Object@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Thread@Base" 0.0.1
 (c++)"typeinfo for libcamera::ThreadMain@Base" 0.0.1
 (c++)"typeinfo for libcamera::Timer@Base" 0.0.1
 (c++|regex|optional)"^typeinfo for std::.*@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, bool>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodPack<void>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodPack<void, bool>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::EventDispatcher@Base" 0.0.1
 (c++)"typeinfo name for libcamera::EventDispatcherPoll@Base" 0.0.1
 (c++)"typeinfo name for libcamera::EventNotifier@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Extensible::Private@Base" 0.0.1
 (c++)"typeinfo name for libcamera::InvokeMessage@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Loggable@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Message@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Object@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Thread@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ThreadMain@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Timer@Base" 0.0.1
 (c++|regex|optional)"^typeinfo name for std::.*@Base" 0.0.1
 (c++|regex|optional)"^void std::.*@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::EventNotifier, void, bool>@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodMember<libcamera::Timer, void>@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodPack<void>@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodPack<void, bool>@Base" 0.0.1
 (c++)"vtable for libcamera::EventDispatcher@Base" 0.0.1
 (c++)"vtable for libcamera::EventDispatcherPoll@Base" 0.0.1
 (c++)"vtable for libcamera::EventNotifier@Base" 0.0.1
 (c++)"vtable for libcamera::Extensible::Private@Base" 0.0.1
 (c++)"vtable for libcamera::InvokeMessage@Base" 0.0.1
 (c++)"vtable for libcamera::Loggable@Base" 0.0.1
 (c++)"vtable for libcamera::Message@Base" 0.0.1
 (c++)"vtable for libcamera::Object@Base" 0.0.1
 (c++)"vtable for libcamera::Thread@Base" 0.0.1
 (c++)"vtable for libcamera::ThreadMain@Base" 0.0.1
 (c++)"vtable for libcamera::Timer@Base" 0.0.1
 (c++|regex|optional)"^vtable for std::.*@Base" 0.0.1
 
libcamera.so.0.0.1 libcamera0 #MINVER#
* Build-Depends-Package: libcamera-dev
 (optional)"__start_lttng_ust_tracepoints_ptrs@Base" 0.0.1
 (optional)"__stop_lttng_ust_tracepoints_ptrs@Base" 0.0.1
 (regex|optional)"^lttng_ust_tracepoint.*@Base" 0.0.1
 (c++|regex|optional)"^bool std::.*@Base" 0~git20200513+924778e
 (c++|regex|optional)"^__gnu_cxx::.*@Base" 0~git20200116+30f9624
 (c++|regex|optional)"^guard variable for std::.*@Base" 0~git20200513+924778e
 (c++)"int libcamera::V4L2Device::fromColorSpace<v4l2_mbus_framefmt>(std::optional<libcamera::ColorSpace> const&, v4l2_mbus_framefmt&)@Base" 0.0.1
 (c++)"int libcamera::V4L2Device::fromColorSpace<v4l2_pix_format_mplane>(std::optional<libcamera::ColorSpace> const&, v4l2_pix_format_mplane&)@Base" 0.0.1
 (c++)"int libcamera::V4L2Device::fromColorSpace<v4l2_pix_format>(std::optional<libcamera::ColorSpace> const&, v4l2_pix_format&)@Base" 0.0.1
 (c++)"libcamera::BayerFormat::fromMbusCode(unsigned int)@Base" 0.0.1
 (c++)"libcamera::BayerFormat::fromPixelFormat(libcamera::PixelFormat)@Base" 0.0.1
 (c++)"libcamera::BayerFormat::fromV4L2PixelFormat(libcamera::V4L2PixelFormat)@Base" 0.0.1
 (c++)"libcamera::BayerFormat::toPixelFormat() const@Base" 0.0.1
 (c++)"libcamera::BayerFormat::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::BayerFormat::toV4L2PixelFormat() const@Base" 0.0.1
 (c++)"libcamera::BayerFormat::transform(libcamera::Transform) const@Base" 0.0.1
 (c++|regex|optional)"^libcamera::BoundMethod.*@Base" 0.0.1
 (c++)"libcamera::ByteStreamBuffer::operator=(libcamera::ByteStreamBuffer&&)@Base" 0.0.1
 (c++)"libcamera::ByteStreamBuffer::setOverflow()@Base" 0.0.1
 (c++)"libcamera::ByteStreamBuffer::ByteStreamBuffer(libcamera::ByteStreamBuffer&&)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char const*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::carveOut(unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::read(unsigned char*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::read(unsigned long, unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::skip(unsigned long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ByteStreamBuffer::write(unsigned char const*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char const*, unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::ByteStreamBuffer(unsigned char*, unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::carveOut(unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::read(unsigned char*, unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::read(unsigned int, unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::skip(unsigned int)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ByteStreamBuffer::write(unsigned char const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::Camera::acquire()@Base" 0.0.1
 (c++)"libcamera::Camera::~Camera()@Base" 0.0.1
 (c++)"libcamera::Camera::Camera(std::unique_ptr<libcamera::Camera::Private, std::default_delete<libcamera::Camera::Private> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::set<libcamera::Stream*, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::addConfiguration(libcamera::StreamConfiguration const&)@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::at(unsigned int)@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::at(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::begin()@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::begin() const@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::~CameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::CameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::empty() const@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::end()@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::end() const@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::size() const@Base" 0.0.1
 (c++)"libcamera::CameraConfiguration::validateColorSpaces(libcamera::Flags<libcamera::CameraConfiguration::ColorSpaceFlag>)@Base" 0.0.1
 (c++)"libcamera::Camera::configure(libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::Camera::controls() const@Base" 0.0.1
 (c++)"libcamera::CameraControlValidator::~CameraControlValidator()@Base" 0.0.1
 (c++)"libcamera::CameraControlValidator::CameraControlValidator(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::CameraControlValidator::name[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::CameraControlValidator::validate(unsigned int) const@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::Camera::createRequest(unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::Camera::createRequest(unsigned long long)@Base" 0.0.1
 (c++)"libcamera::Camera::create(std::unique_ptr<libcamera::Camera::Private, std::default_delete<libcamera::Camera::Private> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::set<libcamera::Stream*, std::less<libcamera::Stream*>, std::allocator<libcamera::Stream*> > const&)@Base" 0.0.1
 (c++)"libcamera::Camera::disconnect()@Base" 0.0.1
 (c++)"libcamera::Camera::exportFrameBuffers(libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::Camera::generateConfiguration(std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::Camera::id[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::CameraLens::~CameraLens()@Base" 0.0.1
 (c++)"libcamera::CameraLens::CameraLens(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::CameraLens::controls() const@Base" 0.0.1
 (c++)"libcamera::CameraLens::init()@Base" 0.0.1
 (c++)"libcamera::CameraLens::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::CameraLens::setFocusPosition(int)@Base" 0.0.1
 (c++)"libcamera::CameraLens::validateLensDriver()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::CameraManager::addCamera(std::shared_ptr<libcamera::Camera>, std::vector<unsigned long, std::allocator<unsigned long> > const&)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::CameraManager::addCamera(std::shared_ptr<libcamera::Camera>, std::vector<unsigned long long, std::allocator<unsigned long long> > const&)@Base" 0.0.1
 (c++)"libcamera::CameraManager::~CameraManager()@Base" 0.0.1
 (c++)"libcamera::CameraManager::CameraManager()@Base" 0.0.1
 (c++)"libcamera::CameraManager::cameras() const@Base" 0.0.1
 (c++)"libcamera::CameraManager::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::CameraManager::get(unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::CameraManager::get(unsigned long long)@Base" 0.0.1
 (c++|regex|optional)"^libcamera::CameraManager::Private::.*@Base" 0.0.1
 (c++)"libcamera::CameraManager::removeCamera(std::shared_ptr<libcamera::Camera>)@Base" 0.0.1
 (c++)"libcamera::CameraManager::self_@Base" 0.0.1
 (c++)"libcamera::CameraManager::start()@Base" 0.0.1
 (c++)"libcamera::CameraManager::stop()@Base" 0.0.1
 (c++)"libcamera::CameraManager::version_[abi:cxx11]@Base" 0.0.1
 (c++)"libcamera::Camera::Private::disconnect()@Base" 0.0.1
 (c++)"libcamera::Camera::Private::isAccessAllowed(libcamera::Camera::Private::State, bool, char const*) const@Base" 0.0.1
 (c++)"libcamera::Camera::Private::isAccessAllowed(libcamera::Camera::Private::State, libcamera::Camera::Private::State, bool, char const*) const@Base" 0.0.1
 (c++)"libcamera::Camera::Private::isAcquired() const@Base" 0.0.1
 (c++)"libcamera::Camera::Private::isRunning() const@Base" 0.0.1
 (c++)"libcamera::Camera::Private::~Private()@Base" 0.0.1
 (c++)"libcamera::Camera::Private::Private(libcamera::PipelineHandler*)@Base" 0.0.1
 (c++)"libcamera::Camera::Private::setState(libcamera::Camera::Private::State)@Base" 0.0.1
 (c++)"libcamera::Camera::properties() const@Base" 0.0.1
 (c++)"libcamera::Camera::queueRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::Camera::release()@Base" 0.0.1
 (c++)"libcamera::Camera::requestComplete(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::applyTestPatternMode(libcamera::controls::draft::TestPatternModeEnum)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::~CameraSensor()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::CameraSensor(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::controls() const@Base" 0.0.1
 (c++)"libcamera::CameraSensor::discoverAncillaryDevices()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::generateId()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::getControls(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::getFormat(std::vector<unsigned int, std::allocator<unsigned int> > const&, libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::CameraSensor::init()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::initProperties()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::initStaticProperties()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::initTestPatternModes()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::initVimcDefaultProperties()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::CameraSensorProperties::get(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::resolution() const@Base" 0.0.1
 (c++)"libcamera::CameraSensor::sensorInfo(libcamera::IPACameraSensorInfo*) const@Base" 0.0.1
 (c++)"libcamera::CameraSensor::setControls(libcamera::ControlList*)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::setFormat(libcamera::V4L2SubdeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::setTestPatternMode(libcamera::controls::draft::TestPatternModeEnum)@Base" 0.0.1
 (c++)"libcamera::CameraSensor::sizes(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::CameraSensor::updateControlInfo()@Base" 0.0.1
 (c++)"libcamera::CameraSensor::validateSensorDriver()@Base" 0.0.1
 (c++)"libcamera::Camera::start(libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::Camera::stop()@Base" 0.0.1
 (c++)"libcamera::Camera::streams() const@Base" 0.0.1
 (c++)"libcamera::CIO2Device::~CIO2Device()@Base" 0.0.1
 (c++)"libcamera::CIO2Device::CIO2Device()@Base" 0.0.1
 (c++)"libcamera::CIO2Device::configure(libcamera::Size const&, libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::CIO2Device::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::CIO2Device::formats() const@Base" 0.0.1
 (c++)"libcamera::CIO2Device::freeBuffers()@Base" 0.0.1
 (c++)"libcamera::CIO2Device::generateConfiguration(libcamera::Size) const@Base" 0.0.1
 (c++)"libcamera::CIO2Device::getSensorFormat(std::vector<unsigned int, std::allocator<unsigned int> > const&, libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::CIO2Device::init(libcamera::MediaDevice const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::CIO2Device::queueBuffer(libcamera::Request*, libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::CIO2Device::sizes(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::CIO2Device::start()@Base" 0.0.1
 (c++)"libcamera::CIO2Device::stop()@Base" 0.0.1
 (c++)"libcamera::CIO2Device::tryReturnBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::ColorSpace::adjust(libcamera::PixelFormat)@Base" 0.0.1
 (c++)"libcamera::ColorSpace::fromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Raw@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Rec2020@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Rec709@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Smpte170m@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Srgb@Base" 0.0.1
 (c++)"libcamera::ColorSpace::Sycc@Base" 0.0.1
 (c++)"libcamera::ColorSpace::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::ColorSpace::toString[abi:cxx11](std::optional<libcamera::ColorSpace> const&)@Base" 0.0.1
 (c++)"libcamera::Control<bool>::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<bool>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::Control<float>::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<float>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::ControlInfo::~ControlInfo()@Base" 0.0.1
 (c++)"libcamera::ControlInfo::ControlInfo(bool)@Base" 0.0.1
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::ControlInfo const&)@Base" 0.0.1
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::ControlValue const&, libcamera::ControlValue const&, libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::ControlInfo::ControlInfo(libcamera::Span<libcamera::ControlValue const, 18446744073709551615ul>, libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::ControlInfo::ControlInfo(std::set<bool, std::less<bool>, std::allocator<bool> >, bool)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::at(unsigned int)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::at(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::ControlInfoMap(std::initializer_list<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> >, std::unordered_map<unsigned int, libcamera::ControlId const*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > > const&)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::ControlInfoMap(std::unordered_map<libcamera::ControlId const*, libcamera::ControlInfo, std::hash<libcamera::ControlId const*>, std::equal_to<libcamera::ControlId const*>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> > >&&, std::unordered_map<unsigned int, libcamera::ControlId const*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > > const&)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::count(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::find(unsigned int)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::find(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap libcamera::ControlSerializer::deserialize<libcamera::ControlInfoMap>(libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlInfoMap::validate()@Base" 0.0.1
 (c++)"libcamera::ControlInfo::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::Control<int>::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<int>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Rectangle>::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Size>::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Size>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<float const, 2ul> >::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<float const, 9ul> >::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<int const, 4ul> >::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<libcamera::Rectangle const, 18446744073709551615ul> >::~Control()@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<libcamera::Rectangle const, 18446744073709551615ul> >::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::Control<libcamera::Span<long const, 2ul> >::~Control()@Base" 0.0.1
 (c++)"libcamera::ControlList::contains(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlList::ControlList()@Base" 0.0.1
 (c++)"libcamera::ControlList::ControlList(libcamera::ControlInfoMap const&, libcamera::ControlValidator const*)@Base" 0.0.1
 (c++)"libcamera::ControlList::ControlList(std::unordered_map<unsigned int, libcamera::ControlId const*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlId const*> > > const&, libcamera::ControlValidator const*)@Base" 0.0.1
 (c++)"libcamera::ControlList::find(unsigned int)@Base" 0.0.1
 (c++)"libcamera::ControlList::find(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlList::get(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::ControlList libcamera::ControlSerializer::deserialize<libcamera::ControlList>(libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlList::merge(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::ControlList::set(unsigned int, libcamera::ControlValue const&)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::Control<long>::~Control()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::Control<long>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::Control<long long>::~Control()@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::Control<long long>::Control(unsigned int, char const*)@Base" 0.0.1
 (c++)"libcamera::controls::AeConstraintMode@Base" 0.0.1
 (c++)"libcamera::controls::AeConstraintModeValues@Base" 0.0.1
 (c++)"libcamera::controls::AeEnable@Base" 0.0.1
 (c++)"libcamera::controls::AeExposureMode@Base" 0.0.1
 (c++)"libcamera::controls::AeExposureModeValues@Base" 0.0.1
 (c++)"libcamera::controls::AeLocked@Base" 0.0.1
 (c++)"libcamera::controls::AeMeteringMode@Base" 0.0.1
 (c++)"libcamera::controls::AeMeteringModeValues@Base" 0.0.1
 (c++)"libcamera::controls::AfMetering@Base" 0.0.1
 (c++)"libcamera::controls::AfMeteringValues@Base" 0.0.1
 (c++)"libcamera::controls::AfMode@Base" 0.0.1
 (c++)"libcamera::controls::AfModeValues@Base" 0.0.1
 (c++)"libcamera::controls::AfPause@Base" 0.0.1
 (c++)"libcamera::controls::AfPauseState@Base" 0.0.1
 (c++)"libcamera::controls::AfPauseStateValues@Base" 0.0.1
 (c++)"libcamera::controls::AfPauseValues@Base" 0.0.1
 (c++)"libcamera::controls::AfRange@Base" 0.0.1
 (c++)"libcamera::controls::AfRangeValues@Base" 0.0.1
 (c++)"libcamera::controls::AfSpeed@Base" 0.0.1
 (c++)"libcamera::controls::AfSpeedValues@Base" 0.0.1
 (c++)"libcamera::controls::AfState@Base" 0.0.1
 (c++)"libcamera::controls::AfStateValues@Base" 0.0.1
 (c++)"libcamera::controls::AfTrigger@Base" 0.0.1
 (c++)"libcamera::controls::AfTriggerValues@Base" 0.0.1
 (c++)"libcamera::controls::AfWindows@Base" 0.0.1
 (c++)"libcamera::controls::AnalogueGain@Base" 0.0.1
 (c++)"libcamera::controls::AwbEnable@Base" 0.0.1
 (c++)"libcamera::controls::AwbLocked@Base" 0.0.1
 (c++)"libcamera::controls::AwbMode@Base" 0.0.1
 (c++)"libcamera::controls::AwbModeValues@Base" 0.0.1
 (c++)"libcamera::controls::Brightness@Base" 0.0.1
 (c++)"libcamera::controls::ColourCorrectionMatrix@Base" 0.0.1
 (c++)"libcamera::controls::ColourGains@Base" 0.0.1
 (c++)"libcamera::controls::ColourTemperature@Base" 0.0.1
 (c++)"libcamera::controls::Contrast@Base" 0.0.1
 (c++)"libcamera::controls::controls@Base" 0.0.1
 (c++)"libcamera::controls::DigitalGain@Base" 0.0.1
 (c++)"libcamera::controls::draft::AePrecaptureTrigger@Base" 0.0.1
 (c++)"libcamera::controls::draft::AePrecaptureTriggerValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::AeState@Base" 0.0.1
 (c++)"libcamera::controls::draft::AeStateValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::AwbState@Base" 0.0.1
 (c++)"libcamera::controls::draft::AwbStateValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::ColorCorrectionAberrationMode@Base" 0.0.1
 (c++)"libcamera::controls::draft::ColorCorrectionAberrationModeValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::LensShadingMapMode@Base" 0.0.1
 (c++)"libcamera::controls::draft::LensShadingMapModeValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::MaxLatency@Base" 0.0.1
 (c++)"libcamera::controls::draft::NoiseReductionMode@Base" 0.0.1
 (c++)"libcamera::controls::draft::NoiseReductionModeValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::PipelineDepth@Base" 0.0.1
 (c++)"libcamera::controls::draft::SceneFlicker@Base" 0.0.1
 (c++)"libcamera::controls::draft::SceneFlickerValues@Base" 0.0.1
 (c++)"libcamera::controls::draft::SensorRollingShutterSkew@Base" 0.0.1
 (c++)"libcamera::controls::draft::TestPatternMode@Base" 0.0.1
 (c++)"libcamera::controls::draft::TestPatternModeValues@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlInfo const&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlInfoMap const&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::binarySize(libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::~ControlSerializer()@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::ControlSerializer(libcamera::ControlSerializer::Role)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::isCached(libcamera::ControlInfoMap const&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::loadControlInfo(libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::loadControlValue(libcamera::ByteStreamBuffer&, bool, unsigned int)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::reset()@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::serialize(libcamera::ControlInfoMap const&, libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::serialize(libcamera::ControlList const&, libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::store(libcamera::ControlInfo const&, libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::ControlSerializer::store(libcamera::ControlValue const&, libcamera::ByteStreamBuffer&)@Base" 0.0.1
 (c++)"libcamera::controls::ExposureTime@Base" 0.0.1
 (c++)"libcamera::controls::ExposureValue@Base" 0.0.1
 (c++)"libcamera::controls::FocusFoM@Base" 0.0.1
 (c++)"libcamera::controls::FrameDuration@Base" 0.0.1
 (c++)"libcamera::controls::FrameDurationLimits@Base" 0.0.1
 (c++)"libcamera::controls::LensPosition@Base" 0.0.1
 (c++)"libcamera::controls::Lux@Base" 0.0.1
 (c++)"libcamera::controls::Saturation@Base" 0.0.1
 (c++)"libcamera::controls::ScalerCrop@Base" 0.0.1
 (c++)"libcamera::controls::SensorBlackLevels@Base" 0.0.1
 (c++)"libcamera::controls::SensorTemperature@Base" 0.0.1
 (c++)"libcamera::controls::SensorTimestamp@Base" 0.0.1
 (c++)"libcamera::controls::Sharpness@Base" 0.0.1
 (c++)"libcamera::Control<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~Control()@Base" 0.0.1
 (c++)"libcamera::ControlValue::~ControlValue()@Base" 0.0.1
 (c++)"libcamera::ControlValue::ControlValue()@Base" 0.0.1
 (c++)"libcamera::ControlValue::ControlValue<int, decltype(nullptr)>(int const&)@Base" 0.0.1
 (c++)"libcamera::ControlValue::ControlValue(libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::ControlValue::data()@Base" 0.0.1
 (c++)"libcamera::ControlValue::data() const@Base" 0.0.1
 (c++)"libcamera::ControlValue::operator=(libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::ControlValue::operator==(libcamera::ControlValue const&) const@Base" 0.0.1
 (c++)"libcamera::ControlValue::release()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ControlValue::reserve(libcamera::ControlType, bool, unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ControlValue::reserve(libcamera::ControlType, bool, unsigned int)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::ControlValue::set(libcamera::ControlType, bool, void const*, unsigned long, unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::ControlValue::set(libcamera::ControlType, bool, void const*, unsigned int, unsigned int)@Base" 0.0.1
 (c++)"libcamera::ControlValue* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<libcamera::ControlValue const*, std::vector<libcamera::ControlValue, std::allocator<libcamera::ControlValue> > >, libcamera::ControlValue*>(__gnu_cxx::__normal_iterator<libcamera::ControlValue const*, std::vector<libcamera::ControlValue, std::allocator<libcamera::ControlValue> > >, __gnu_cxx::__normal_iterator<libcamera::ControlValue const*, std::vector<libcamera::ControlValue, std::allocator<libcamera::ControlValue> > >, libcamera::ControlValue*)@Base" 0.0.1
 (c++)"libcamera::ControlValue* std::__do_uninit_copy<libcamera::ControlValue const*, libcamera::ControlValue*>(libcamera::ControlValue const*, libcamera::ControlValue const*, libcamera::ControlValue*)@Base" 0.0.1
 (c++)"libcamera::ControlValue::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::DelayedControls::applyControls(unsigned int)@Base" 0.0.1
 (c++)"libcamera::DelayedControls::DelayedControls(libcamera::V4L2Device*, std::unordered_map<unsigned int, libcamera::DelayedControls::ControlParams, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::DelayedControls::ControlParams> > > const&)@Base" 0.0.1
 (c++)"libcamera::DelayedControls::get(unsigned int)@Base" 0.0.1
 (c++)"libcamera::DelayedControls::push(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::DelayedControls::reset()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::addDevice(std::unique_ptr<libcamera::MediaDevice, std::default_delete<libcamera::MediaDevice> >)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::create()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::createDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::~DeviceEnumerator()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::removeDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumerator::search(libcamera::DeviceMatch const&)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorSysfs::~DeviceEnumeratorSysfs()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorSysfs::enumerate()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorSysfs::init()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorSysfs::lookupDeviceNode[abi:cxx11](int, int)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorSysfs::populateMediaDevice(libcamera::MediaDevice*)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::addUdevDevice(udev_device*)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::DeviceEnumeratorUdev::addV4L2Device(unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::DeviceEnumeratorUdev::addV4L2Device(unsigned long long)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::~DeviceEnumeratorUdev()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::DeviceEnumeratorUdev()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::enumerate()@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::init()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::DeviceEnumeratorUdev::lookupDeviceNode[abi:cxx11](unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::DeviceEnumeratorUdev::lookupDeviceNode[abi:cxx11](unsigned long long)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::DeviceEnumeratorUdev::populateMediaDevice(libcamera::MediaDevice*, std::map<unsigned long, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> >, std::less<unsigned long>, std::allocator<std::pair<unsigned long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > > >*)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::DeviceEnumeratorUdev::populateMediaDevice(libcamera::MediaDevice*, std::map<unsigned long long, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> >, std::less<unsigned long long>, std::allocator<std::pair<unsigned long long const, std::__cxx11::list<libcamera::MediaEntity*, std::allocator<libcamera::MediaEntity*> > > > >*)@Base" 0.0.1
 (c++)"libcamera::DeviceEnumeratorUdev::udevNotify()@Base" 0.0.1
 (c++)"libcamera::DeviceMatch::add(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::DeviceMatch::DeviceMatch(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::DeviceMatch::match(libcamera::MediaDevice const*) const@Base" 0.0.1
 (c++)"libcamera::Fence::Fence(libcamera::UniqueFD)@Base" 0.0.1
 (c++)"libcamera::FrameBufferAllocator::allocate(libcamera::Stream*)@Base" 0.0.1
 (c++)"libcamera::FrameBufferAllocator::buffers(libcamera::Stream*) const@Base" 0.0.1
 (c++)"libcamera::FrameBufferAllocator::~FrameBufferAllocator()@Base" 0.0.1
 (c++)"libcamera::FrameBufferAllocator::FrameBufferAllocator(std::shared_ptr<libcamera::Camera>)@Base" 0.0.1
 (c++)"libcamera::FrameBufferAllocator::free(libcamera::Stream*)@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::cookie() const@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::FrameBuffer(std::unique_ptr<libcamera::FrameBuffer::Private, std::default_delete<libcamera::FrameBuffer::Private> >)@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::FrameBuffer(std::vector<libcamera::FrameBuffer::Plane, std::allocator<libcamera::FrameBuffer::Plane> > const&, unsigned int)@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::metadata() const@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::planes() const@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::Plane* std::__do_uninit_copy<libcamera::FrameBuffer::Plane const*, libcamera::FrameBuffer::Plane*>(libcamera::FrameBuffer::Plane const*, libcamera::FrameBuffer::Plane const*, libcamera::FrameBuffer::Plane*)@Base" 0.0.1
 (c++|regex|optional)"^libcamera::FrameBuffer::Private.*@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::releaseFence()@Base" 0.0.1
 (c++)"libcamera::FrameBuffer::request() const@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::FrameBuffer::setCookie(unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::FrameBuffer::setCookie(unsigned long long)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::allocateBuffers(unsigned int)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::calculatePipeConfig(libcamera::ImgUDevice::Pipe*)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::configure(libcamera::ImgUDevice::PipeConfig const&, libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::configureVideoDevice(libcamera::V4L2VideoDevice*, unsigned int, libcamera::StreamConfiguration const&, libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::enableLinks(bool)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::freeBuffers()@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::~ImgUDevice()@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::init(libcamera::MediaDevice*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::kOutputMinSize@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::linkSetup(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, bool)@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::start()@Base" 0.0.1
 (c++)"libcamera::ImgUDevice::stop()@Base" 0.0.1
 (c++|regex)"^libcamera::IPADataSerializer.*@Base" 0.0.1
 (c++)"libcamera::ipa::ipu3::IPAConfigInfo::~IPAConfigInfo()@Base" 0.0.1
 (c++)"libcamera::ipa::ipu3::IPAIPU3Interface::~IPAIPU3Interface()@Base" 0.0.1
 (c++|regex)"^libcamera::ipa::ipu3::IPAProxyIPU3::.*@Base" 0.0.1
 (c++)"libcamera::IPAManager::addDir(char const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPAManager::~IPAManager()@Base" 0.0.1
 (c++)"libcamera::IPAManager::IPAManager()@Base" 0.0.1
 (c++)"libcamera::IPAManager::isSignatureValid(libcamera::IPAModule*) const@Base" 0.0.1
 (c++)"libcamera::IPAManager::module(libcamera::PipelineHandler*, unsigned int, unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPAManager::parseDir(char const*, unsigned int, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&)@Base" 0.0.1
 (c++)"libcamera::IPAManager::pubKey_@Base" 0.0.1
 (c++)"libcamera::IPAManager::publicKeyData_@Base" 0.0.1
 (c++)"libcamera::IPAManager::self_@Base" 0.0.1
 (c++)"libcamera::IPAModule::createInterface()@Base" 0.0.1
 (c++)"libcamera::IPAModule::info() const@Base" 0.0.1
 (c++)"libcamera::IPAModule::~IPAModule()@Base" 0.0.1
 (c++)"libcamera::IPAModule::IPAModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::IPAModule::isValid() const@Base" 0.0.1
 (c++)"libcamera::IPAModule::load()@Base" 0.0.1
 (c++)"libcamera::IPAModule::loadIPAModuleInfo()@Base" 0.0.1
 (c++)"libcamera::IPAModule::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::IPAModule::match(libcamera::PipelineHandler*, unsigned int, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::IPAModule::path[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::IPAModule::signature() const@Base" 0.0.1
 (c++)"libcamera::IPAProxy::configurationFile(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0.0.1
 (c++)"libcamera::IPAProxy::~IPAProxy()@Base" 0.0.1
 (c++)"libcamera::IPAProxy::IPAProxy(libcamera::IPAModule*)@Base" 0.0.1
 (c++)"libcamera::IPAProxy::resolvePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0.0.1
 (c++|regex)"^libcamera::ipa::rkisp1::IPAProxyRkISP1::.*@Base" 0.0.1
 (c++)"libcamera::ipa::rkisp1::IPARkISP1Interface::~IPARkISP1Interface()@Base" 0.0.1
 (c++|regex)"^libcamera::ipa::RPi::IPAProxyRPi::.*@Base" 0.0.1
 (c++)"libcamera::ipa::RPi::IPARPiInterface::~IPARPiInterface()@Base" 0.0.1
 (c++|regex)"^libcamera::ipa::vimc::IPAProxyVimc::.*@Base" 0.0.1
 (c++)"libcamera::ipa::vimc::IPAVimcInterface::~IPAVimcInterface()@Base" 0.0.1
 (c++)"libcamera::IPCMessage::IPCMessage()@Base" 0.0.1
 (c++)"libcamera::IPCMessage::IPCMessage(libcamera::IPCMessage::Header const&)@Base" 0.0.1
 (c++)"libcamera::IPCMessage::IPCMessage(libcamera::IPCUnixSocket::Payload&)@Base" 0.0.1
 (c++)"libcamera::IPCMessage::IPCMessage(unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPCMessage::payload() const@Base" 0.0.1
 (c++)"libcamera::IPCPipe::~IPCPipe()@Base" 0.0.1
 (c++)"libcamera::IPCPipe::IPCPipe()@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::call(libcamera::IPCUnixSocket::Payload const&, libcamera::IPCUnixSocket::Payload*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::~IPCPipeUnixSocket()@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::IPCPipeUnixSocket(char const*, char const*)@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::readyRead()@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::sendAsync(libcamera::IPCMessage const&)@Base" 0.0.1
 (c++)"libcamera::IPCPipeUnixSocket::sendSync(libcamera::IPCMessage const&, libcamera::IPCMessage*)@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::bind(libcamera::UniqueFD)@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::close()@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::create()@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::dataNotifier()@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::~IPCUnixSocket()@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::IPCUnixSocket()@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::isBound() const@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::receive(libcamera::IPCUnixSocket::Payload*)@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::recvData(void*, unsigned long, int*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::sendData(void const*, unsigned long, int const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPCUnixSocket::send(libcamera::IPCUnixSocket::Payload const&)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraConfiguration::~IPU3CameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraConfiguration::IPU3CameraConfiguration(libcamera::IPU3CameraData*)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::cancelPendingRequests()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::cio2BufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::frameStart(unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::imguOutputBufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::~IPU3CameraData()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::loadIPA()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::metadataReady(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::paramBufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::paramsBufferReady(unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::queuePendingRequests()@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::setSensorControls(unsigned int, libcamera::ControlList const&, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::IPU3CameraData::statBufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::clear()@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::create(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::find(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::find(unsigned int)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::init(std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > const&, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > const&)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::~IPU3Frames()@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::IPU3Frames()@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::remove(libcamera::IPU3Frames::Info*)@Base" 0.0.1
 (c++)"libcamera::IPU3Frames::tryComplete(libcamera::IPU3Frames::Info*)@Base" 0.0.1
 (c++)"libcamera::logCategoryAllocator()@Base" 0.0.1
 (c++)"libcamera::logCategoryBuffer()@Base" 0.0.1
 (c++)"libcamera::logCategoryCamera()@Base" 0.0.1
 (c++)"libcamera::logCategoryCameraLens()@Base" 0.0.1
 (c++)"libcamera::logCategoryCameraSensor()@Base" 0.0.1
 (c++)"libcamera::logCategoryCameraSensorProperties()@Base" 0.0.1
 (c++)"libcamera::logCategoryControls()@Base" 0.0.1
 (c++)"libcamera::logCategoryDelayedControls()@Base" 0.0.1
 (c++)"libcamera::logCategoryDeviceEnumerator()@Base" 0.0.1
 (c++)"libcamera::logCategoryFormats()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPADataSerializer()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPAManager()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPAModule()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPAProxy()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPCPipe()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPCUnixSocket()@Base" 0.0.1
 (c++)"libcamera::logCategoryIPU3()@Base" 0.0.1
 (c++)"libcamera::logCategoryMediaDevice()@Base" 0.0.1
 (c++)"libcamera::logCategoryPipeline()@Base" 0.0.1
 (c++)"libcamera::logCategoryProcess()@Base" 0.0.1
 (c++)"libcamera::logCategoryRequest()@Base" 0.0.1
 (c++)"libcamera::logCategoryRkISP1()@Base" 0.0.1
 (c++)"libcamera::logCategoryRPI()@Base" 0.0.1
 (c++)"libcamera::logCategoryRPISTREAM()@Base" 0.0.1
 (c++)"libcamera::logCategorySerialization()@Base" 0.0.1
 (c++)"libcamera::logCategorySerializer()@Base" 0.0.1
 (c++)"libcamera::logCategorySimplePipeline()@Base" 0.0.1
 (c++)"libcamera::logCategoryStream()@Base" 0.0.1
 (c++)"libcamera::logCategorySysFs()@Base" 0.0.1
 (c++)"libcamera::logCategoryUVC()@Base" 0.0.1
 (c++)"libcamera::logCategoryV4L2()@Base" 0.0.1
 (c++)"libcamera::logCategoryVIMC()@Base" 0.0.1
 (c++)"libcamera::logCategoryYamlParser()@Base" 0.0.1
 (c++)"libcamera::MappedBuffer::~MappedBuffer()@Base" 0.0.1
 (c++)"libcamera::MappedBuffer::MappedBuffer()@Base" 0.0.1
 (c++)"libcamera::MappedBuffer::MappedBuffer(libcamera::MappedBuffer&&)@Base" 0.0.1
 (c++)"libcamera::MappedBuffer::operator=(libcamera::MappedBuffer&&)@Base" 0.0.1
 (c++)"libcamera::MappedFrameBuffer::MappedFrameBuffer(libcamera::FrameBuffer const*, libcamera::Flags<libcamera::MappedFrameBuffer::MapFlag>)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::acquire()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::addObject(libcamera::MediaObject*)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::clear()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::close()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::disableLinks()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::findInterface(media_v2_topology const&, unsigned int)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::fixupEntityFlags(media_v2_entity*)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::getEntityByName(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0.0.1
 (c++)"libcamera::MediaDevice::link(libcamera::MediaEntity const*, unsigned int, libcamera::MediaEntity const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::link(libcamera::MediaPad const*, libcamera::MediaPad const*)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::link(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned int)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::lock()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::MediaDevice::~MediaDevice()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::MediaDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::object(unsigned int)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::open()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::populate()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::populateEntities(media_v2_topology const&)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::populateLinks(media_v2_topology const&)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::populatePads(media_v2_topology const&)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::release()@Base" 0.0.1
 (c++)"libcamera::MediaDevice::setupLink(libcamera::MediaLink const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::MediaDevice::unlock()@Base" 0.0.1
 (c++)"libcamera::MediaEntity::addAncillaryEntity(libcamera::MediaEntity*)@Base" 0.0.1
 (c++)"libcamera::MediaEntity::addPad(libcamera::MediaPad*)@Base" 0.0.1
 (c++)"libcamera::MediaEntity::getPadById(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::MediaEntity::getPadByIndex(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::MediaEntity::~MediaEntity()@Base" 0.0.1
 (c++)"libcamera::MediaEntity::MediaEntity(libcamera::MediaDevice*, media_v2_entity const*, media_v2_interface const*)@Base" 0.0.1
 (c++)"libcamera::MediaEntity::setDeviceNode(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::MediaLink::~MediaLink()@Base" 0.0.1
 (c++)"libcamera::MediaLink::MediaLink(media_v2_link const*, libcamera::MediaPad*, libcamera::MediaPad*)@Base" 0.0.1
 (c++)"libcamera::MediaLink::setEnabled(bool)@Base" 0.0.1
 (c++)"libcamera::MediaPad::addLink(libcamera::MediaLink*)@Base" 0.0.1
 (c++)"libcamera::MediaPad::~MediaPad()@Base" 0.0.1
 (c++)"libcamera::MediaPad::MediaPad(media_v2_pad const*, libcamera::MediaEntity*)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::BayerFormat const&, libcamera::BayerFormat const&)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::ColorSpace const&, libcamera::ColorSpace const&)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::Point const&, libcamera::Point const&)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::Rectangle const&, libcamera::Rectangle const&)@Base" 0.0.1
 (c++)"libcamera::operator<(libcamera::Size const&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::Size const&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::operator==(libcamera::SizeRange const&, libcamera::SizeRange const&)@Base" 0.0.1
 (c++)"libcamera::operator-(libcamera::Transform)@Base" 0.0.1
 (c++)"libcamera::operator*(libcamera::Transform, libcamera::Transform)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::BayerFormat const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::PixelFormat const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::Point const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::Rectangle const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::Request const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::SizeRange const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::V4L2DeviceFormat const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::V4L2PixelFormat const&)@Base" 0.0.1
 (c++)"libcamera::operator<<(std::basic_ostream<char, std::char_traits<char> >&, libcamera::V4L2SubdeviceFormat const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::acquire()@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::acquireMediaDevice(libcamera::DeviceEnumerator*, libcamera::DeviceMatch const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::completeBuffer(libcamera::Request*, libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::completeRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::disconnect()@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::doQueueRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::doQueueRequests()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactoryBase::create(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactoryBase::factories()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactoryBase::PipelineHandlerFactoryBase(char const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactoryBase::registerType(libcamera::PipelineHandlerFactoryBase*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerIPU3>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerIPU3>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRkISP1>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRkISP1>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRPi>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRPi>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerUVC>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerUVC>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerVimc>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerVimc>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::SimplePipelineHandler>::createInstance(libcamera::CameraManager*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerFactory<libcamera::SimplePipelineHandler>::~PipelineHandlerFactory()@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::hasPendingRequests(libcamera::Camera const*) const@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::hotplugMediaDevice(libcamera::MediaDevice*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::allocateBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::freeBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::initControls(libcamera::IPU3CameraData*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::~PipelineHandlerIPU3()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::PipelineHandlerIPU3(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::registerCameras()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerIPU3::updateControls(libcamera::IPU3CameraData*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::mediaDeviceDisconnected(libcamera::MediaDevice*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::~PipelineHandler()@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::PipelineHandler(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::queueRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::registerCamera(std::shared_ptr<libcamera::Camera>)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::registerRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::release()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::allocateBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::bufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::createCamera(libcamera::MediaEntity*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::freeBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::initLinks(libcamera::Camera*, libcamera::CameraSensor const*, libcamera::RkISP1CameraConfiguration const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::paramReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::~PipelineHandlerRkISP1()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::PipelineHandlerRkISP1(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::statReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRkISP1::tryCompleteRequest(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::mapBuffers(libcamera::Camera*, std::unordered_map<unsigned int, libcamera::FrameBuffer*, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer*> > > const&, unsigned int)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::~PipelineHandlerRPi()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::PipelineHandlerRPi(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::prepareBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::queueAllBuffers(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::registerCamera(libcamera::MediaDevice*, libcamera::MediaDevice*, libcamera::MediaEntity*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerRPi::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::stop(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandler::unlockMediaDevices()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::~PipelineHandlerUVC()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::PipelineHandlerUVC(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::processControl(libcamera::ControlList*, unsigned int, libcamera::ControlValue const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::processControls(libcamera::UVCCameraData*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerUVC::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::~PipelineHandlerVimc()@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::PipelineHandlerVimc(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::processControls(libcamera::VimcCameraData*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::PipelineHandlerVimc::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::PixelFormat::fromString(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::frameSize(libcamera::Size const&, std::array<unsigned int, 3ul> const&) const@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::frameSize(libcamera::Size const&, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::info(libcamera::PixelFormat const&)@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::info(libcamera::V4L2PixelFormat const&)@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::info(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::numPlanes() const@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::~PixelFormatInfo()@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::PixelFormatInfo(libcamera::PixelFormatInfo const&)@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::planeSize(libcamera::Size const&, unsigned int, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::planeSize(unsigned int, unsigned int, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::PixelFormatInfo::stride(unsigned int, unsigned int, unsigned int) const@Base" 0.0.1
 (c++)"libcamera::PixelFormat::operator<(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::PixelFormat::operator==(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::PixelFormat::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::Point::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::Process::closeAllFdsExcept(std::vector<int, std::allocator<int> > const&)@Base" 0.0.1
 (c++)"libcamera::Process::died(int)@Base" 0.0.1
 (c++)"libcamera::Process::isolate()@Base" 0.0.1
 (c++)"libcamera::Process::kill()@Base" 0.0.1
 (c++)"libcamera::ProcessManager::instance()@Base" 0.0.1
 (c++)"libcamera::ProcessManager::oldsa() const@Base" 0.0.1
 (c++)"libcamera::ProcessManager::~ProcessManager()@Base" 0.0.1
 (c++)"libcamera::ProcessManager::ProcessManager()@Base" 0.0.1
 (c++)"libcamera::ProcessManager::registerProcess(libcamera::Process*)@Base" 0.0.1
 (c++)"libcamera::ProcessManager::self_@Base" 0.0.1
 (c++)"libcamera::ProcessManager::sighandler()@Base" 0.0.1
 (c++)"libcamera::ProcessManager::writePipe() const@Base" 0.0.1
 (c++)"libcamera::Process::~Process()@Base" 0.0.1
 (c++)"libcamera::Process::Process()@Base" 0.0.1
 (c++)"libcamera::Process::start(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::vector<int, std::allocator<int> > const&)@Base" 0.0.1
 (c++)"libcamera::properties::draft::ColorFilterArrangement@Base" 0.0.1
 (c++)"libcamera::properties::draft::ColorFilterArrangementValues@Base" 0.0.1
 (c++)"libcamera::properties::Location@Base" 0.0.1
 (c++)"libcamera::properties::LocationValues@Base" 0.0.1
 (c++)"libcamera::properties::Model[abi:cxx11]@Base" 0.0.1
 (c++)"libcamera::properties::PixelArrayActiveAreas@Base" 0.0.1
 (c++)"libcamera::properties::PixelArrayOpticalBlackRectangles@Base" 0.0.1
 (c++)"libcamera::properties::PixelArraySize@Base" 0.0.1
 (c++)"libcamera::properties::properties@Base" 0.0.1
 (c++)"libcamera::properties::Rotation@Base" 0.0.1
 (c++)"libcamera::properties::ScalerCropMaximum@Base" 0.0.1
 (c++)"libcamera::properties::SensorSensitivity@Base" 0.0.1
 (c++)"libcamera::properties::UnitCellSize@Base" 0.0.1
 (c++)"libcamera::PubKey::~PubKey()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::PubKey::PubKey(libcamera::Span<unsigned char const, 18446744073709551615ul>)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::PubKey::verify(libcamera::Span<unsigned char const, 18446744073709551615ul>, libcamera::Span<unsigned char const, 18446744073709551615ul>) const@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::PubKey::PubKey(libcamera::Span<unsigned char const, 4294967295u>)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::PubKey::verify(libcamera::Span<unsigned char const, 4294967295u>, libcamera::Span<unsigned char const, 4294967295u>) const@Base" 0.0.1
 (c++)"libcamera::Rectangle::boundedTo(libcamera::Rectangle const&) const@Base" 0.0.1
 (c++)"libcamera::Rectangle::center() const@Base" 0.0.1
 (c++)"libcamera::Rectangle::enclosedIn(libcamera::Rectangle const&) const@Base" 0.0.1
 (c++)"libcamera::Rectangle::scaleBy(libcamera::Size const&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::Rectangle::scaledBy(libcamera::Size const&, libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::Rectangle::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::Rectangle::translateBy(libcamera::Point const&)@Base" 0.0.1
 (c++)"libcamera::Rectangle::translatedBy(libcamera::Point const&) const@Base" 0.0.1
 (c++)"libcamera::Request::addBuffer(libcamera::Stream const*, libcamera::FrameBuffer*, std::unique_ptr<libcamera::Fence, std::default_delete<libcamera::Fence> >)@Base" 0.0.1
 (c++)"libcamera::Request::findBuffer(libcamera::Stream const*) const@Base" 0.0.1
 (c++)"libcamera::Request::hasPendingBuffers() const@Base" 0.0.1
 (c++)"libcamera::Request::Private::cancel()@Base" 0.0.1
 (c++)"libcamera::Request::Private::complete()@Base" 0.0.1
 (c++)"libcamera::Request::Private::completeBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::Request::Private::doCancelRequest()@Base" 0.0.1
 (c++)"libcamera::Request::Private::emitPrepareCompleted()@Base" 0.0.1
 (c++)"libcamera::Request::Private::hasPendingBuffers() const@Base" 0.0.1
 (c++)"libcamera::Request::Private::notifierActivated(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::Request::Private::prepare(std::chrono::duration<long, std::ratio<1l, 1000l> >)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::Request::Private::prepare(std::chrono::duration<long long, std::ratio<1ll, 1000ll> >)@Base" 0.0.1
 (c++)"libcamera::Request::Private::~Private()@Base" 0.0.1
 (c++)"libcamera::Request::Private::Private(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::Request::Private::reset()@Base" 0.0.1
 (c++)"libcamera::Request::Private::timeout()@Base" 0.0.1
 (c++)"libcamera::Request::~Request()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::Request::Request(libcamera::Camera*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::Request::Request(libcamera::Camera*, unsigned long long)@Base" 0.0.1
 (c++)"libcamera::Request::reuse(libcamera::Request::ReuseFlag)@Base" 0.0.1
 (c++)"libcamera::Request::sequence() const@Base" 0.0.1
 (c++)"libcamera::Request::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraConfiguration::fitsAllPaths(libcamera::StreamConfiguration const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraConfiguration::~RkISP1CameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraConfiguration::RkISP1CameraConfiguration(libcamera::Camera*, libcamera::RkISP1CameraData*)@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::loadIPA(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::metadataReady(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::paramFilled(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::pipe()@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::~RkISP1CameraData()@Base" 0.0.1
 (c++)"libcamera::RkISP1CameraData::setSensorControls(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::clear()@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::create(libcamera::RkISP1CameraData const*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::destroy(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::find(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::find(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::find(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RkISP1Frames::RkISP1Frames(libcamera::PipelineHandler*)@Base" 0.0.1
 (c++)"libcamera::RkISP1MainPath::RkISP1MainPath()@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::configure(libcamera::StreamConfiguration const&, libcamera::V4L2SubdeviceFormat const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::generateConfiguration(libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::init(libcamera::MediaDevice*)@Base" 0.0.1
 (c++|regex)"^libcamera::RkISP1Path::RkISP1Path(char const*, libcamera::Span<libcamera::PixelFormat const, .*> const&, libcamera::Size const&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::start()@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::stop()@Base" 0.0.1
 (c++)"libcamera::RkISP1Path::validate(libcamera::StreamConfiguration*)@Base" 0.0.1
 (c++)"libcamera::RkISP1SelfPath::RkISP1SelfPath()@Base" 0.0.1
 (c++)"libcamera::RPiCameraConfiguration::~RPiCameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::RPiCameraConfiguration::RPiCameraConfiguration(libcamera::RPiCameraData const*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::applyScalerCrop(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::checkRequestCompleted()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::clearIncompleteRequests()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::configureIPA(libcamera::CameraConfiguration const*, libcamera::ipa::RPi::IPAConfigResult*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::embeddedComplete(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::enumerateVideoDevices(libcamera::MediaLink*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::fillRequestMetadata(libcamera::ControlList const&, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::findMatchingBuffers(libcamera::RPiCameraData::BayerFrame&, libcamera::FrameBuffer*&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::frameStarted(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::freeBuffers()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::handleExternalBuffer(libcamera::FrameBuffer*, libcamera::RPi::Stream*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::handleState()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::handleStreamBuffer(libcamera::FrameBuffer*, libcamera::RPi::Stream*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::ispInputDequeue(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::ispOutputDequeue(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::loadIPA(libcamera::ipa::RPi::IPAInitResult*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::~RPiCameraData()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::RPiCameraData(libcamera::PipelineHandler*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::runIsp(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::scaleIspCrop(libcamera::Rectangle const&) const@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::setDelayedControls(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::setIspControls(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::setSensorControls(libcamera::ControlList&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::statsMetadataComplete(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::tryRunPipeline()@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::unicamBufferDequeue(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPiCameraData::unicamTimeout()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::RPi::DmaHeap::alloc(char const*, unsigned long)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::RPi::DmaHeap::alloc(char const*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::RPi::DmaHeap::~DmaHeap()@Base" 0.0.1
 (c++)"libcamera::RPi::DmaHeap::DmaHeap()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::clearBuffers()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::dev() const@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::getBufferId(libcamera::FrameBuffer*) const@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::getBuffers() const@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::IdGenerator::get()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::IdGenerator::reset()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::isExternal() const@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::name[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::prepareBuffers(unsigned int)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::queueAllBuffers()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::queueBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::queueToDevice(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::releaseBuffers()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::removeExternalBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::resetBuffers()@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::returnBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::setExportedBuffers(std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::setExternal(bool)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::setExternalBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::RPi::Stream::~Stream()@Base" 0.0.1
 (c++)"libcamera::SharedFD* std::__do_uninit_copy<__gnu_cxx::__normal_iterator<libcamera::SharedFD*, std::vector<libcamera::SharedFD, std::allocator<libcamera::SharedFD> > >, libcamera::SharedFD*>(__gnu_cxx::__normal_iterator<libcamera::SharedFD*, std::vector<libcamera::SharedFD, std::allocator<libcamera::SharedFD> > >, __gnu_cxx::__normal_iterator<libcamera::SharedFD*, std::vector<libcamera::SharedFD, std::allocator<libcamera::SharedFD> > >, libcamera::SharedFD*)@Base" 0.0.1
 (c++)"libcamera::SharedFD* std::__do_uninit_copy<libcamera::SharedFD const*, libcamera::SharedFD*>(libcamera::SharedFD const*, libcamera::SharedFD const*, libcamera::SharedFD*)@Base" 0.0.1
 (c++)"libcamera::Signal<libcamera::ControlList const&>::disconnect()@Base" 0.0.1
 (c++)"libcamera::Signal<libcamera::FrameBuffer*>::disconnect()@Base" 0.0.1
 (c++)"libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()@Base" 0.0.1
 (c++)"libcamera::Signal<unsigned int>::disconnect()@Base" 0.0.1
 (c++)"libcamera::Signal<unsigned int, libcamera::ControlList const&>::disconnect()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraConfiguration::~SimpleCameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraConfiguration::SimpleCameraConfiguration(libcamera::Camera*, libcamera::SimpleCameraData*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::bufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::converterInputDone(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::converterOutputDone(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::init()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::pipe()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::routedSourcePads(libcamera::MediaPad*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::setupFormats(libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::setupLinks()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::~SimpleCameraData()@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::SimpleCameraData(libcamera::SimplePipelineHandler*, unsigned int, libcamera::MediaEntity*)@Base" 0.0.1
 (c++)"libcamera::SimpleCameraData::tryPipeline(unsigned int, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::configure(libcamera::StreamConfiguration const&, std::vector<std::reference_wrapper<libcamera::StreamConfiguration>, std::allocator<std::reference_wrapper<libcamera::StreamConfiguration> > > const&)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::exportBuffers(unsigned int, unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::formats(libcamera::PixelFormat)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::queueBuffers(libcamera::FrameBuffer*, std::map<unsigned int, libcamera::FrameBuffer*, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::FrameBuffer*> > > const&)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::SimpleConverter(libcamera::MediaDevice*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::sizes(libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::start()@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::stop()@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::captureBufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::configure(libcamera::StreamConfiguration const&, libcamera::StreamConfiguration const&)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::outputBufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::queueBuffers(libcamera::FrameBuffer*, libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::start()@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::stop()@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::~Stream()@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::Stream::Stream(libcamera::SimpleConverter*, unsigned int)@Base" 0.0.1
 (c++)"libcamera::SimpleConverter::strideAndFrameSize(libcamera::PixelFormat const&, libcamera::Size const&)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::acquirePipeline(libcamera::SimpleCameraData*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::configure(libcamera::Camera*, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::EntityData::~EntityData()@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::exportFrameBuffers(libcamera::Camera*, libcamera::Stream*, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::generateConfiguration(libcamera::Camera*, std::vector<libcamera::StreamRole, std::allocator<libcamera::StreamRole> > const&)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::locateSensors()@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::match(libcamera::DeviceEnumerator*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::queueRequestDevice(libcamera::Camera*, libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::releasePipeline(libcamera::SimpleCameraData*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::resetRoutingTable(libcamera::V4L2Subdevice*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::~SimplePipelineHandler()@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::SimplePipelineHandler(libcamera::CameraManager*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::start(libcamera::Camera*, libcamera::ControlList const*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::stopDevice(libcamera::Camera*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::subdev(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::SimplePipelineHandler::video(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::Size::boundedToAspectRatio(libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::Size::centeredTo(libcamera::Point const&) const@Base" 0.0.1
 (c++)"libcamera::Size::expandedToAspectRatio(libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::Size::operator*=(float)@Base" 0.0.1
 (c++)"libcamera::Size::operator/=(float)@Base" 0.0.1
 (c++)"libcamera::Size::operator*(float) const@Base" 0.0.1
 (c++)"libcamera::Size::operator/(float) const@Base" 0.0.1
 (c++)"libcamera::SizeRange::contains(libcamera::Size const&) const@Base" 0.0.1
 (c++)"libcamera::SizeRange::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::Size::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::StreamConfiguration::StreamConfiguration()@Base" 0.0.1
 (c++)"libcamera::StreamConfiguration::StreamConfiguration(libcamera::StreamFormats const&)@Base" 0.0.1
 (c++)"libcamera::StreamConfiguration::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::StreamFormats::pixelformats() const@Base" 0.0.1
 (c++)"libcamera::StreamFormats::range(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::StreamFormats::sizes(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::StreamFormats::StreamFormats()@Base" 0.0.1
 (c++)"libcamera::StreamFormats::StreamFormats(std::map<libcamera::PixelFormat, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> >, std::less<libcamera::PixelFormat>, std::allocator<std::pair<libcamera::PixelFormat const, std::vector<libcamera::SizeRange, std::allocator<libcamera::SizeRange> > > > > const&)@Base" 0.0.1
 (c++)"libcamera::Stream::Stream()@Base" 0.0.1
 (c++)"libcamera::sysfs::charDevPath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::sysfs::firmwareNodePath(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::transformFromRotation(int, bool*)@Base" 0.0.1
 (c++)"libcamera::transformToString(libcamera::Transform)@Base" 0.0.1
 (c++)"libcamera::utils::libcameraBuildPath[abi:cxx11]()@Base" 0.0.1
 (c++)"libcamera::utils::libcameraSourcePath[abi:cxx11]()@Base" 0.0.1
 (c++)"libcamera::UVCCameraConfiguration::~UVCCameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::UVCCameraConfiguration::UVCCameraConfiguration(libcamera::UVCCameraData*)@Base" 0.0.1
 (c++)"libcamera::UVCCameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::UVCCameraData::addControl(unsigned int, libcamera::ControlInfo const&, std::unordered_map<libcamera::ControlId const*, libcamera::ControlInfo, std::hash<libcamera::ControlId const*>, std::equal_to<libcamera::ControlId const*>, std::allocator<std::pair<libcamera::ControlId const* const, libcamera::ControlInfo> > >*)@Base" 0.0.1
 (c++)"libcamera::UVCCameraData::bufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::UVCCameraData::generateId()@Base" 0.0.1
 (c++)"libcamera::UVCCameraData::init(libcamera::MediaDevice*)@Base" 0.0.1
 (c++)"libcamera::UVCCameraData::~UVCCameraData()@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::Entry::Entry()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::V4L2BufferCache::Entry::Entry(bool, unsigned long, libcamera::FrameBuffer const&)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::V4L2BufferCache::Entry::Entry(bool, unsigned long long, libcamera::FrameBuffer const&)@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::Entry::operator==(libcamera::FrameBuffer const&) const@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::get(libcamera::FrameBuffer const&)@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::isEmpty() const@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::put(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::~V4L2BufferCache()@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::V4L2BufferCache(std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2BufferCache::V4L2BufferCache(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::close()@Base" 0.0.1
 (c++)"libcamera::V4L2Device::controlInfo(unsigned int) const@Base" 0.0.1
 (c++)"libcamera::V4L2Device::devicePath[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Device::eventAvailable()@Base" 0.0.1
 (c++)"libcamera::V4L2DeviceFormat::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Device::getControls(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::ioctl(unsigned long, void*)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::listControls()@Base" 0.0.1
 (c++)"libcamera::V4L2Device::open(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::setControls(libcamera::ControlList*)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::setFd(libcamera::UniqueFD)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::setFrameStartEnabled(bool)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::updateControlInfo()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::V4L2Device::updateControls(libcamera::ControlList*, libcamera::Span<v4l2_ext_control const, 18446744073709551615ul>)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::V4L2Device::updateControls(libcamera::ControlList*, libcamera::Span<v4l2_ext_control const, 4294967295u>)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::v4l2ControlId(v4l2_query_ext_ctrl const&)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::v4l2ControlInfo(v4l2_query_ext_ctrl const&)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::v4l2CtrlType(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::~V4L2Device()@Base" 0.0.1
 (c++)"libcamera::V4L2Device::V4L2Device(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2Device::v4l2MenuControlInfo(v4l2_query_ext_ctrl const&)@Base" 0.0.1
 (c++)"libcamera::V4L2M2MDevice::close()@Base" 0.0.1
 (c++)"libcamera::V4L2M2MDevice::open()@Base" 0.0.1
 (c++)"libcamera::V4L2M2MDevice::~V4L2M2MDevice()@Base" 0.0.1
 (c++)"libcamera::V4L2M2MDevice::V4L2M2MDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2PixelFormat::description() const@Base" 0.0.1
 (c++)"libcamera::V4L2PixelFormat::fromPixelFormat(libcamera::PixelFormat const&)@Base" 0.0.1
 (c++)"libcamera::V4L2PixelFormat::toPixelFormat(bool) const@Base" 0.0.1
 (c++)"libcamera::V4L2PixelFormat::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::enumPadCodes(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::enumPadSizes(unsigned int, unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2SubdeviceFormat::bitsPerPixel() const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::formats(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2SubdeviceFormat::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::fromEntityName(libcamera::MediaDevice const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::getFormat(unsigned int, libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::getRouting(libcamera::V4L2Subdevice::Routing*, libcamera::V4L2Subdevice::Whence)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::getSelection(unsigned int, unsigned int, libcamera::Rectangle*)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::model[abi:cxx11]()@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::open()@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::Routing::toString[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::setFormat(unsigned int, libcamera::V4L2SubdeviceFormat*, libcamera::V4L2Subdevice::Whence)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::setRouting(libcamera::V4L2Subdevice::Routing*, libcamera::V4L2Subdevice::Whence)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::setSelection(unsigned int, unsigned int, libcamera::Rectangle*)@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::toColorSpace(v4l2_mbus_framefmt const&) const@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::~V4L2Subdevice()@Base" 0.0.1
 (c++)"libcamera::V4L2Subdevice::V4L2Subdevice(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::allocateBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::bufferAvailable()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::close()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::createBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::createBuffer(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::dequeueBuffer()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::enumPixelformats(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::enumSizes(libcamera::V4L2PixelFormat)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::exportBuffers(unsigned int, std::vector<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> >, std::allocator<std::unique_ptr<libcamera::FrameBuffer, std::default_delete<libcamera::FrameBuffer> > > >*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::exportDmabufFd(unsigned int, unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::formats(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::fromEntityName(libcamera::MediaDevice const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::getFormat(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::getFormatMeta(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::getFormatMultiplane(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::getFormatSingleplane(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::importBuffers(unsigned int)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::initFormats()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::logPrefix[abi:cxx11]() const@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::open()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::open(libcamera::SharedFD, v4l2_buf_type)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::queueBuffer(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::releaseBuffers()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::requestBuffers(unsigned int, v4l2_memory)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::setDequeueTimeout(libcamera::utils::Duration)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::setFormat(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::setSelection(unsigned int, libcamera::Rectangle*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::streamOff()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::streamOn()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::toV4L2PixelFormat(libcamera::PixelFormat const&) const@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::tryFormat(libcamera::V4L2DeviceFormat*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::trySetFormatMeta(libcamera::V4L2DeviceFormat*, bool)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::trySetFormatMultiplane(libcamera::V4L2DeviceFormat*, bool)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::trySetFormatSingleplane(libcamera::V4L2DeviceFormat*, bool)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::~V4L2VideoDevice()@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::V4L2VideoDevice(libcamera::MediaEntity const*)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::V4L2VideoDevice(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@Base" 0.0.1
 (c++)"libcamera::V4L2VideoDevice::watchdogExpired()@Base" 0.0.1
 (c++)"libcamera::VimcCameraConfiguration::validate()@Base" 0.0.1
 (c++)"libcamera::VimcCameraConfiguration::~VimcCameraConfiguration()@Base" 0.0.1
 (c++)"libcamera::VimcCameraConfiguration::VimcCameraConfiguration(libcamera::VimcCameraData*)@Base" 0.0.1
 (c++)"libcamera::VimcCameraData::allocateMockIPABuffers()@Base" 0.0.1
 (c++)"libcamera::VimcCameraData::bufferReady(libcamera::FrameBuffer*)@Base" 0.0.1
 (c++)"libcamera::VimcCameraData::init()@Base" 0.0.1
 (c++)"libcamera::VimcCameraData::paramsBufferReady(unsigned int)@Base" 0.0.1
 (c++)"libcamera::VimcCameraData::~VimcCameraData()@Base" 0.0.1
 (c++)"libcamera::YamlObject::contains(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0.0.1
 (c++)"libcamera::YamlObject::operator[](std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) const@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::YamlObject::operator[](unsigned long) const@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::YamlObject::operator[](unsigned int) const@Base" 0.0.1
 (c++)"libcamera::YamlObject::size() const@Base" 0.0.1
 (c++)"libcamera::YamlObject::~YamlObject()@Base" 0.0.1
 (c++)"libcamera::YamlObject::YamlObject()@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::init(libcamera::File&)@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::nextEvent()@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::parseContent(libcamera::YamlObject&)@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::parseDictionaryOrList(libcamera::YamlObject::Type, std::function<int (std::unique_ptr<yaml_event_s, libcamera::YamlParserContext::EventDeleter>)> const&)@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::parseNextYamlObject(libcamera::YamlObject&, std::unique_ptr<yaml_event_s, libcamera::YamlParserContext::EventDeleter>)@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::readValue(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&, std::unique_ptr<yaml_event_s, libcamera::YamlParserContext::EventDeleter>)@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::~YamlParserContext()@Base" 0.0.1
 (c++)"libcamera::YamlParserContext::YamlParserContext()@Base" 0.0.1
 (c++|arch-bits=64)"libcamera::YamlParserContext::yamlRead(void*, unsigned char*, unsigned long, unsigned long*)@Base" 0.0.1
 (c++|arch-bits=32)"libcamera::YamlParserContext::yamlRead(void*, unsigned char*, unsigned int, unsigned int*)@Base" 0.0.1
 (c++)"libcamera::YamlParser::parse(libcamera::File&)@Base" 0.0.1
 (c++)"lttng::ust::details::lttng_ust_constructor_destructor_libcamera::~lttng_ust_constructor_destructor_libcamera()@Base" 0.0.1
 (c++)"lttng::ust::details::lttng_ust_constructor_destructor_libcamera::lttng_ust_constructor_destructor_libcamera()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::CameraManager::Private::~Private()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::CameraManager::Private::run()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::configure(libcamera::ipa::ipu3::IPAConfigInfo const&, libcamera::ControlInfoMap*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::fillParamsBuffer(unsigned int, unsigned int)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::init(libcamera::IPASettings const&, libcamera::IPACameraSensorInfo const&, libcamera::ControlInfoMap const&, libcamera::ControlInfoMap*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::~IPAProxyIPU3()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::processStatsBuffer(unsigned int, long, unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::queueRequest(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::start()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::stop()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::ipu3::IPAProxyIPU3::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::configure(libcamera::IPACameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::fillParamsBuffer(unsigned int, unsigned int)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::init(libcamera::IPASettings const&, unsigned int, libcamera::ControlInfoMap*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::~IPAProxyRkISP1()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::processStatsBuffer(unsigned int, unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::queueRequest(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::start()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::stop()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::rkisp1::IPAProxyRkISP1::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::configure(libcamera::IPACameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > > const&, libcamera::ipa::RPi::IPAConfig const&, libcamera::ControlList*, libcamera::ipa::RPi::IPAConfigResult*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::init(libcamera::IPASettings const&, libcamera::ipa::RPi::IPAInitResult*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::~IPAProxyRPi()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::signalIspPrepare(libcamera::ipa::RPi::ISPConfig const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::signalQueueRequest(libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::signalStatReady(unsigned int)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::start(libcamera::ControlList const&, libcamera::ipa::RPi::StartConfig*)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::stop()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::RPi::IPAProxyRPi::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::configure(libcamera::IPACameraSensorInfo const&, std::map<unsigned int, libcamera::IPAStream, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::IPAStream> > > const&, std::map<unsigned int, libcamera::ControlInfoMap, std::less<unsigned int>, std::allocator<std::pair<unsigned int const, libcamera::ControlInfoMap> > > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::fillParamsBuffer(unsigned int, unsigned int)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::init(libcamera::IPASettings const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::~IPAProxyVimc()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::mapBuffers(std::vector<libcamera::IPABuffer, std::allocator<libcamera::IPABuffer> > const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::queueRequest(unsigned int, libcamera::ControlList const&)@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::start()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::stop()@Base" 0.0.1
 (c++)"non-virtual thunk to libcamera::ipa::vimc::IPAProxyVimc::unmapBuffers(std::vector<unsigned int, std::allocator<unsigned int> > const&)@Base" 0.0.1
 (c++|regex|optional)"^std::.*@Base" 0~git20200417+35269f0
 (c++|rexex)"^typeinfo for libcamera::BoundMethod.*@Base" 0.0.1
 (c++)"typeinfo for libcamera::Camera@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraControlValidator@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraLens@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraManager@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraManager::Private@Base" 0.0.1
 (c++)"typeinfo for libcamera::Camera::Private@Base" 0.0.1
 (c++)"typeinfo for libcamera::CameraSensor@Base" 0.0.1
 (c++)"typeinfo for libcamera::ControlValidator@Base" 0.0.1
 (c++)"typeinfo for libcamera::DeviceEnumerator@Base" 0.0.1
 (c++)"typeinfo for libcamera::DeviceEnumeratorSysfs@Base" 0.0.1
 (c++)"typeinfo for libcamera::DeviceEnumeratorUdev@Base" 0.0.1
 (c++)"typeinfo for libcamera::Extensible@Base" 0.0.1
 (c++)"typeinfo for libcamera::FrameBuffer::Private@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPAInterface@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::ipu3::IPAIPU3Interface@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::ipu3::IPAProxyIPU3@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::ipu3::IPAProxyIPU3::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPAModule@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPAProxy@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::rkisp1::IPAProxyRkISP1@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::rkisp1::IPAProxyRkISP1::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::rkisp1::IPARkISP1Interface@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::RPi::IPAProxyRPi@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::RPi::IPAProxyRPi::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::RPi::IPARPiInterface@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::vimc::IPAProxyVimc@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::vimc::IPAProxyVimc::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo for libcamera::ipa::vimc::IPAVimcInterface@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPCPipe@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPCPipeUnixSocket@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPU3CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::IPU3CameraData@Base" 0.0.1
 (c++)"typeinfo for libcamera::MediaDevice@Base" 0.0.1
 (c++)"typeinfo for libcamera::MediaEntity@Base" 0.0.1
 (c++)"typeinfo for libcamera::MediaLink@Base" 0.0.1
 (c++)"typeinfo for libcamera::MediaObject@Base" 0.0.1
 (c++)"typeinfo for libcamera::MediaPad@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandler@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactoryBase@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerIPU3>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRkISP1>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRPi>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerUVC>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerVimc>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerFactory<libcamera::SimplePipelineHandler>@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerIPU3@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerRkISP1@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerRPi@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerUVC@Base" 0.0.1
 (c++)"typeinfo for libcamera::PipelineHandlerVimc@Base" 0.0.1
 (c++)"typeinfo for libcamera::Request::Private@Base" 0.0.1
 (c++)"typeinfo for libcamera::RkISP1CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::RkISP1CameraData@Base" 0.0.1
 (c++)"typeinfo for libcamera::RPiCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::RPiCameraData@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<>::disconnect<libcamera::CameraManager::Private>(libcamera::CameraManager::Private*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::FrameBuffer*>::disconnect<libcamera::SimpleCameraData, void>(libcamera::SimpleCameraData*, void (libcamera::SimpleCameraData::*)(libcamera::FrameBuffer*))::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::IPCMessage const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::Signal<unsigned int, libcamera::ControlList const&, libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo for libcamera::SimpleCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::SimpleCameraData@Base" 0.0.1
 (c++)"typeinfo for libcamera::SimpleConverter::Stream@Base" 0.0.1
 (c++)"typeinfo for libcamera::SimplePipelineHandler@Base" 0.0.1
 (c++)"typeinfo for libcamera::UVCCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::UVCCameraData@Base" 0.0.1
 (c++)"typeinfo for libcamera::V4L2Device@Base" 0.0.1
 (c++)"typeinfo for libcamera::V4L2Subdevice@Base" 0.0.1
 (c++)"typeinfo for libcamera::V4L2VideoDevice@Base" 0.0.1
 (c++)"typeinfo for libcamera::VimcCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo for libcamera::VimcCameraData@Base" 0.0.1
 (c++|regex|optional)"^typeinfo for std::.*@Base" 0~git20200116+30f9624
 (c++|regex)"^typeinfo name for libcamera::BoundMethod.*@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Camera@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraControlValidator@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraLens@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraManager@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraManager::Private@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Camera::Private@Base" 0.0.1
 (c++)"typeinfo name for libcamera::CameraSensor@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ControlValidator@Base" 0.0.1
 (c++)"typeinfo name for libcamera::DeviceEnumerator@Base" 0.0.1
 (c++)"typeinfo name for libcamera::DeviceEnumeratorSysfs@Base" 0.0.1
 (c++)"typeinfo name for libcamera::DeviceEnumeratorUdev@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Extensible@Base" 0.0.1
 (c++)"typeinfo name for libcamera::FrameBuffer::Private@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPAInterface@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::ipu3::IPAIPU3Interface@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::ipu3::IPAProxyIPU3@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::ipu3::IPAProxyIPU3::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPAModule@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPAProxy@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::rkisp1::IPAProxyRkISP1@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::rkisp1::IPAProxyRkISP1::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::rkisp1::IPARkISP1Interface@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::RPi::IPAProxyRPi@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::RPi::IPAProxyRPi::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::RPi::IPARPiInterface@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::vimc::IPAProxyVimc@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::vimc::IPAProxyVimc::ThreadProxy@Base" 0.0.1
 (c++)"typeinfo name for libcamera::ipa::vimc::IPAVimcInterface@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPCPipe@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPCPipeUnixSocket@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPU3CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::IPU3CameraData@Base" 0.0.1
 (c++)"typeinfo name for libcamera::MediaDevice@Base" 0.0.1
 (c++)"typeinfo name for libcamera::MediaEntity@Base" 0.0.1
 (c++)"typeinfo name for libcamera::MediaLink@Base" 0.0.1
 (c++)"typeinfo name for libcamera::MediaObject@Base" 0.0.1
 (c++)"typeinfo name for libcamera::MediaPad@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandler@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactoryBase@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerIPU3>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRkISP1>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRPi>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerUVC>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerVimc>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerFactory<libcamera::SimplePipelineHandler>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerIPU3@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerRkISP1@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerRPi@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerUVC@Base" 0.0.1
 (c++)"typeinfo name for libcamera::PipelineHandlerVimc@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Request::Private@Base" 0.0.1
 (c++)"typeinfo name for libcamera::RkISP1CameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::RkISP1CameraData@Base" 0.0.1
 (c++)"typeinfo name for libcamera::RPiCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::RPiCameraData@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<>::disconnect<libcamera::CameraManager::Private>(libcamera::CameraManager::Private*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<>::disconnect<libcamera::PipelineHandler>(libcamera::PipelineHandler*)::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::FrameBuffer*>::disconnect<libcamera::SimpleCameraData, void>(libcamera::SimpleCameraData*, void (libcamera::SimpleCameraData::*)(libcamera::FrameBuffer*))::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::IPCMessage const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::Process::ExitStatus, int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::Request*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<libcamera::Request*, libcamera::FrameBuffer*>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<std::shared_ptr<libcamera::Camera> >::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<unsigned int>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::Signal<unsigned int, libcamera::ControlList const&, libcamera::ControlList const&>::disconnect()::{lambda(std::_List_iterator<libcamera::BoundMethodBase*>&)#1}@Base" 0.0.1
 (c++)"typeinfo name for libcamera::SimpleCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::SimpleCameraData@Base" 0.0.1
 (c++)"typeinfo name for libcamera::SimpleConverter::Stream@Base" 0.0.1
 (c++)"typeinfo name for libcamera::SimplePipelineHandler@Base" 0.0.1
 (c++)"typeinfo name for libcamera::UVCCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::UVCCameraData@Base" 0.0.1
 (c++)"typeinfo name for libcamera::V4L2Device@Base" 0.0.1
 (c++)"typeinfo name for libcamera::V4L2Subdevice@Base" 0.0.1
 (c++)"typeinfo name for libcamera::V4L2VideoDevice@Base" 0.0.1
 (c++)"typeinfo name for libcamera::VimcCameraConfiguration@Base" 0.0.1
 (c++)"typeinfo name for libcamera::VimcCameraData@Base" 0.0.1
 (c++|regex|optional)"^typeinfo name for std::.*@Base" 0~git20200513+924778e
 (c++|regex|optional)"^void std::.*@Base" 0~git20200513+924778e
 (c++|regex)"^vtable for libcamera::BoundMethod.*@Base" 0.0.1
 (c++)"vtable for libcamera::Camera@Base" 0.0.1
 (c++)"vtable for libcamera::CameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::CameraControlValidator@Base" 0.0.1
 (c++)"vtable for libcamera::CameraLens@Base" 0.0.1
 (c++)"vtable for libcamera::CameraManager@Base" 0.0.1
 (c++)"vtable for libcamera::CameraManager::Private@Base" 0.0.1
 (c++)"vtable for libcamera::Camera::Private@Base" 0.0.1
 (c++)"vtable for libcamera::CameraSensor@Base" 0.0.1
 (c++)"vtable for libcamera::DeviceEnumerator@Base" 0.0.1
 (c++)"vtable for libcamera::DeviceEnumeratorSysfs@Base" 0.0.1
 (c++)"vtable for libcamera::DeviceEnumeratorUdev@Base" 0.0.1
 (c++)"vtable for libcamera::FrameBuffer::Private@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::ipu3::IPAIPU3Interface@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::ipu3::IPAProxyIPU3@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::ipu3::IPAProxyIPU3::ThreadProxy@Base" 0.0.1
 (c++)"vtable for libcamera::IPAModule@Base" 0.0.1
 (c++)"vtable for libcamera::IPAProxy@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::rkisp1::IPAProxyRkISP1@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::rkisp1::IPAProxyRkISP1::ThreadProxy@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::rkisp1::IPARkISP1Interface@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::RPi::IPAProxyRPi@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::RPi::IPAProxyRPi::ThreadProxy@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::RPi::IPARPiInterface@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::vimc::IPAProxyVimc@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::vimc::IPAProxyVimc::ThreadProxy@Base" 0.0.1
 (c++)"vtable for libcamera::ipa::vimc::IPAVimcInterface@Base" 0.0.1
 (c++)"vtable for libcamera::IPCPipe@Base" 0.0.1
 (c++)"vtable for libcamera::IPCPipeUnixSocket@Base" 0.0.1
 (c++)"vtable for libcamera::IPU3CameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::IPU3CameraData@Base" 0.0.1
 (c++)"vtable for libcamera::MediaDevice@Base" 0.0.1
 (c++)"vtable for libcamera::MediaEntity@Base" 0.0.1
 (c++)"vtable for libcamera::MediaLink@Base" 0.0.1
 (c++)"vtable for libcamera::MediaPad@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandler@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactoryBase@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerIPU3>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRkISP1>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerRPi>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerUVC>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::PipelineHandlerVimc>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerFactory<libcamera::SimplePipelineHandler>@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerIPU3@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerRkISP1@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerRPi@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerUVC@Base" 0.0.1
 (c++)"vtable for libcamera::PipelineHandlerVimc@Base" 0.0.1
 (c++)"vtable for libcamera::Request::Private@Base" 0.0.1
 (c++)"vtable for libcamera::RkISP1CameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::RkISP1CameraData@Base" 0.0.1
 (c++)"vtable for libcamera::RPiCameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::RPiCameraData@Base" 0.0.1
 (c++)"vtable for libcamera::SimpleCameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::SimpleCameraData@Base" 0.0.1
 (c++)"vtable for libcamera::SimpleConverter::Stream@Base" 0.0.1
 (c++)"vtable for libcamera::SimplePipelineHandler@Base" 0.0.1
 (c++)"vtable for libcamera::UVCCameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::UVCCameraData@Base" 0.0.1
 (c++)"vtable for libcamera::V4L2Device@Base" 0.0.1
 (c++)"vtable for libcamera::V4L2Subdevice@Base" 0.0.1
 (c++)"vtable for libcamera::V4L2VideoDevice@Base" 0.0.1
 (c++)"vtable for libcamera::VimcCameraConfiguration@Base" 0.0.1
 (c++)"vtable for libcamera::VimcCameraData@Base" 0.0.1
 (c++|regex|optional)"^vtable for std::.*@Base" 0~git20200116+30f9624

libgstlibcamera.so libcamera0 #MINVER#
 (c++)"FrameWrap::~FrameWrap()@Base" 0.0.1
 (c++)"FrameWrap::FrameWrap(_GstAllocator*, libcamera::FrameBuffer*, void*)@Base" 0.0.1
 (c++)"FrameWrap::getQuark()@Base" 0.0.1
 (c++)"gst_libcamera_allocator_get_pool_size(_GstLibcameraAllocator*, libcamera::Stream*)@Base" 0.0.1
 (c++)"gst_libcamera_allocator_get_type()@Base" 0.0.1
 (c++)"gst_libcamera_allocator_new(std::shared_ptr<libcamera::Camera>, libcamera::CameraConfiguration*)@Base" 0.0.1
 (c++)"gst_libcamera_allocator_prepare_buffer(_GstLibcameraAllocator*, libcamera::Stream*, _GstBuffer*)@Base" 0.0.1
 (c++)"gst_libcamera_buffer_get_frame_buffer(_GstBuffer*)@Base" 0.0.1
 (c++)"gst_libcamera_configure_stream_from_caps(libcamera::StreamConfiguration&, _GstCaps*)@Base" 0.0.1
 (c++)"gst_libcamera_device_get_type()@Base" 0.0.1
 (c++)"gst_libcamera_get_camera_manager(int&)@Base" 0.0.1
 (c++)"gst_libcamera_memory_get_frame_buffer(_GstMemory*)@Base" 0.0.1
 (c++)"gst_libcamera_pad_get_pool(_GstPad*)@Base" 0.0.1
 (c++)"gst_libcamera_pad_get_role(_GstPad*)@Base" 0.0.1
 (c++)"gst_libcamera_pad_get_stream(_GstPad*)@Base" 0.0.1
 (c++)"gst_libcamera_pad_get_type()@Base" 0.0.1
 (c++)"gst_libcamera_pad_set_latency(_GstPad*, unsigned long)@Base" 0.0.1
 (c++)"gst_libcamera_pad_set_pool(_GstPad*, _GstLibcameraPool*)@Base" 0.0.1
 (c++)"gst_libcamera_pool_get_stream(_GstLibcameraPool*)@Base" 0.0.1
 (c++)"gst_libcamera_pool_get_type()@Base" 0.0.1
 (c++)"gst_libcamera_pool_new(_GstLibcameraAllocator*, libcamera::Stream*)@Base" 0.0.1
 (c++)"GstLibcameraSrcState::processRequest()@Base" 0.0.1
 (c++)"GstLibcameraSrcState::queueRequest()@Base" 0.0.1
 (c++)"GstLibcameraSrcState::requestCompleted(libcamera::Request*)@Base" 0.0.1
 gst_libcamera_provider_get_type@Base 0.0.1
 gst_libcamera_src_get_type@Base 0.0.1
 gst_plugin_libcamera_get_desc@Base 0.0.1
 gst_plugin_libcamera_register@Base 0.0.1
 (c++)"gst_libcamera_stream_configuration_to_caps(libcamera::StreamConfiguration const&)@Base" 0.0.1
 (c++)"gst_libcamera_stream_formats_to_caps(libcamera::StreamFormats const&)@Base" 0.0.1
 (c++)"libcamera::BoundMethodArgs<void, libcamera::Request*>::invokePack(libcamera::BoundMethodPackBase*)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>::activate(libcamera::Request*, bool)@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>::~BoundMethodMember()@Base" 0.0.1
 (c++)"libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>::invoke(libcamera::Request*)@Base" 0.0.1
 (c++)"libcamera::BoundMethodPack<void, libcamera::Request*>::~BoundMethodPack()@Base" 0.0.1
 (c++)"RequestWrap::attachBuffer(libcamera::Stream*, _GstBuffer*)@Base" 0.0.1
 (c++)"RequestWrap::detachBuffer(libcamera::Stream*)@Base" 0.0.1
 (c++)"RequestWrap::~RequestWrap()@Base" 0.0.1
 (c++)"RequestWrap::RequestWrap(std::unique_ptr<libcamera::Request, std::default_delete<libcamera::Request> >)@Base" 0.0.1
 (c++|regex|optional)"^std::.*@Base" 0.0.1
 request_src_template@Base 0.0.1
 src_template@Base 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodArgs<void, libcamera::Request*>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodBase@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodPackBase@Base" 0.0.1
 (c++)"typeinfo for libcamera::BoundMethodPack<void, libcamera::Request*>@Base" 0.0.1
 (c++|regex|optional)"^typeinfo for std::.*@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodArgs<void, libcamera::Request*>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodBase@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodPackBase@Base" 0.0.1
 (c++)"typeinfo name for libcamera::BoundMethodPack<void, libcamera::Request*>@Base" 0.0.1
 (c++|regex|optional)"^typeinfo name for std::.*@Base" 0.0.1
 (c++|regex|optional)"^void std::.*@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodMember<GstLibcameraSrcState, void, libcamera::Request*>@Base" 0.0.1
 (c++)"vtable for libcamera::BoundMethodPack<void, libcamera::Request*>@Base" 0.0.1
 (c++|regex|optional)"^vtable for std::.*@Base" 0.0.1

v4l2-compat.so libcamera0 #MINVER#
 (c++|regex|optional)"^std::.*@Base" 0.0.1
 (c++|regex|optional)"^typeinfo for std::.*@Base" 0.0.1
 (c++|regex|optional)"^typeinfo name for std::.*@Base" 0.0.1
 (optional)"close@Base" 0.0.1
 (optional)"dup@Base" 0.0.1
 (optional)"ioctl@Base" 0.0.1
 (optional)"munmap@Base" 0.0.1
 (regex|optional)"^__open.*@Base" 0.0.1
 (regex|optional)"^open.*@Base" 0.0.1
 (optional)"ioctl@Base" 0.0.1
 (regex|optional)"^mmap.*@Base" 0.0.1
